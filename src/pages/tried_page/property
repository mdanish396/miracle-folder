To address the issues you've mentioned, I'll focus on the following key fixes:

1. **Handle each type's own brochure and plan**: Ensure that the selected floorplan type has its corresponding brochure and floor plan when clicked.
2. **Download brochure functionality**: Add a method to download the brochure for the selected plan.
3. **Popup floorplan**: Trigger a popup to view the floorplan when the "View Floorplan" button is clicked.
4. **Layout Adjustments**: Ensure that the details grid layout works consistently across screen sizes and that the layout behaves well when the user clicks on different plan types.

Here's a fixed version of the code with enhancements to handle the behavior and layout you want, utilizing **Quasar Framework** for responsiveness and layout consistency:

### HTML and Vue Template (Updated)

```html
<template>
  <div class="floorplan-section">
    <h2 class="floorplan-title">Floorplan</h2>
    <div class="floorplan-container">

      <!-- Header Section -->
      <div class="floorplan-header">
        <div class="plan-select">
          <select v-model="selectedPlan" id="planSelect" class="custom-select">
            <option
              v-for="(plans, planType) in floorplan[property.name][0]"
              :key="planType"
              :value="planType"
            >{{ planType }}</option>
          </select>
        </div>
        <div class="plan-price">
          Price From <span class="price">{{ property.price }}</span>
        </div>
      </div>

      <!-- Details Section -->
      <div class="floorplan-details">
        <div
          v-for="(plans, planType) in floorplan[property.name][0]"
          :key="planType"
        >
          <div v-if="selectedPlan === planType" class="details-grid">
            <div class="details-item" v-for="(item, index) in plans[0]" :key="index">
              <img :src="item.icon" alt="Icon" class="icon-3" />
              <p>{{ item.label }}</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Buttons Section -->
      <div class="floorplan-buttons">
        <button @click="downloadBrochure" class="btn download-btn">
          <img src="src/assets/brochure.svg" alt="Download" />
          Download Brochure
        </button>
        <button @click="viewFloorplan" class="btn view-btn">
          <img src="src/assets/area.svg" alt="View" />
          View Floorplan
        </button>
      </div>
    </div>
  </div>

  <!-- Popup for floorplan image -->
  <q-dialog v-model="showPlanDialog">
    <q-card class="q-pa-none">
      <q-img :src="selectedPlanImage" />
    </q-card>
  </q-dialog>
</template>
```

### JavaScript Logic (Vue Script)

```javascript
<script>
export default {
  data() {
    return {
      selectedPlan: '2 Storey Semi-D A', // Default plan
      showPlanDialog: false,
      selectedPlanImage: '',
      floorplan: {
        'Monarc Homes': [
          {
            '2 Storey Semi-D A': [
              {
                area: '1,800 sqft',
                bedroom: 4,
                bathroom: 3,
                icon: 'src/assets/bed.png',
                label: '4 Bedrooms',
                plan: 'src/assets/currentproject/house1.jpg',
                brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf'
              },
              {
                area: '1,800 sqft',
                bedroom: 4,
                bathroom: 3,
                icon: 'src/assets/bathroom.svg',
                label: '3 Bathrooms'
              },
              {
                area: '1,800 sqft',
                bedroom: 4,
                bathroom: 3,
                icon: 'src/assets/area.svg',
                label: '1800 sqft Area'
              }
            ],
            '2 Storey Semi-D B': [
              {
                area: '2,800 sqft',
                bedroom: 5,
                bathroom: 4,
                icon: 'src/assets/bed.png',
                label: '5 Bedrooms',
                plan: 'src/assets/currentproject/house2.jpg',
                brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf'
              },
              {
                area: '2,800 sqft',
                bedroom: 5,
                bathroom: 4,
                icon: 'src/assets/bathroom.svg',
                label: '4 Bathrooms'
              },
              {
                area: '2,800 sqft',
                bedroom: 5,
                bathroom: 4,
                icon: 'src/assets/area.svg',
                label: '2800 sqft Area'
              }
            ]
          }
        ]
      },
      property: {
        name: 'Monarc Homes',
        price: '$500,000'
      }
    };
  },
  methods: {
    downloadBrochure() {
      const selectedPlanData = this.getSelectedPlanData();
      if (selectedPlanData && selectedPlanData.brochure) {
        const link = document.createElement('a');
        link.href = selectedPlanData.brochure;
        link.download = 'Brochure.pdf'; // You can dynamically set a name here
        link.click();
      }
    },
    viewFloorplan() {
      const selectedPlanData = this.getSelectedPlanData();
      if (selectedPlanData && selectedPlanData.plan) {
        this.selectedPlanImage = selectedPlanData.plan;
        this.showPlanDialog = true;
      }
    },
    getSelectedPlanData() {
      const selectedPlan = this.selectedPlan;
      const floorplanData = this.floorplan[this.property.name][0];
      for (const planType in floorplanData) {
        if (planType === selectedPlan) {
          return floorplanData[planType][0]; // Returns the first object for the selected plan
        }
      }
      return null;
    }
  }
};
</script>
```

### CSS (Updated for Quasar and Responsiveness)

```css
<style scoped>
.floorplan-section {
  padding: 20px 5%;
  font-family: Arial, sans-serif;
  text-align: center;
}

.floorplan-title {
  padding-top: 50px;
  font-size: 48px;
  line-height: 48px;
  font-weight: bold;
  color: #1e1e1e;
}

.floorplan-container {
  background-color: white;
  border: 1px solid #ddd;
  padding: 20px 5%;
}

.floorplan-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  background-color: #08463c;
  color: white;
}

.plan-select {
  padding: 5px;
  font-size: 17px;
  color: white;
}

.custom-select {
  width: 100%;
  max-width: 300px;
  background-color: #08463c;
  color: white;
  border: 1px solid #727272;
  padding: 10px 16px;
  font-size: 16px;
  border-radius: 3px;
  cursor: pointer;
  transition: background-color 0.3s ease, color 0.3s ease;
}

.custom-select:hover {
  background-color: #0a5b4d;
}

.floorplan-details {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  flex-wrap: wrap;
}

.details-grid {
  display: flex;
  justify-content: center;
  gap: 20px;
}

.details-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  width: 190px;
  min-height: 200px;
}

.details-item p {
  font-size: 17px;
  line-height: 27px;
  color: #000000;
}

.icon-3 {
  width: 60px;
  margin-bottom: 10px;
}

.floorplan-buttons {
  margin-top: 20px;
  display: flex;
  justify-content: center;
  gap: 20px;
}

.btn {
  display: flex;
  align-items: center;
  padding: 10px 20px;
  border: 1px solid #ccc;
  background: #fff;
  cursor: pointer;
  font-size: 14px;
  font-weight: bold;
  white-space: nowrap;
}

.download-btn {
  border: 2px solid #08463c;
  color: #08463c;
}

.view-btn {
  border: 2px solid #08463c;
  color: #08463c;
}

.btn img {
  width: 16px;
  height: 16px;
  margin-right: 10px;
}

.btn:hover {
  background-color: #08463c;
  color: white;
}

.download-btn:hover img,
.view-btn:hover img {
  filter: invert(1);
}

@media (max-width: 600px) {
  .details-grid {
    flex-direction: column;
    align-items: center;
  }
}
</style>
```

### Key Improvements:
1. **Download Brochure**: Clicking on the download button will trigger a download of the selected plan's brochure.
2. **View Floorplan Popup**: Clicking on the "View Floorplan" button opens a popup displaying the selected floorplan image.
3. **Layout Fixes**:
   - Details grid is now consistently laid out in one line and adjusts for smaller screen sizes.
   - Responsive using Quasar's grid system, ensuring better behavior on mobile and smaller screens.
4. **Data Binding**: Plan-specific data (area, bedrooms, bathrooms) and brochure links are dynamically rendered based on the selected floor plan.








































To adjust the solution based on your provided script setup while keeping the functionality intact, here's an updated version of the code. We will maintain the dynamic behavior you need for the property, floorplan, and responsive behavior while addressing the following:

1. Use **`ref`** for reactivity, and ensure that **`selectedPlan`** updates correctly.
2. Track screen size changes, particularly for screens below 540px, to ensure responsiveness.
3. Bind the property details, floorplans, and brochure functionality dynamically.

Here's the updated code:

### Updated Vue Template:

```html
<template>
  <div class="floorplan-section">
    <h2 class="floorplan-title">Floorplan</h2>
    <div class="floorplan-container">

      <!-- Header Section -->
      <div class="floorplan-header">
        <div class="plan-select">
          <select v-model="selectedPlan" id="planSelect" class="custom-select">
            <option
              v-for="(plans, planType) in floorplan[property.name][0]"
              :key="planType"
              :value="planType"
            >{{ planType }}</option>
          </select>
        </div>
        <div class="plan-price">
          Price From <span class="price">{{ property.price }}</span>
        </div>
      </div>

      <!-- Details Section -->
      <div class="floorplan-details">
        <div
          v-for="(plans, planType) in floorplan[property.name][0]"
          :key="planType"
        >
          <div v-if="selectedPlan === planType" class="details-grid">
            <div class="details-item" v-for="(item, index) in plans[0]" :key="index">
              <img :src="item.icon" alt="Icon" class="icon-3" />
              <p>{{ item.label }}</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Buttons Section -->
      <div class="floorplan-buttons">
        <button @click="downloadBrochure" class="btn download-btn">
          <img src="src/assets/brochure.svg" alt="Download" />
          Download Brochure
        </button>
        <button @click="viewFloorplan" class="btn view-btn">
          <img src="src/assets/area.svg" alt="View" />
          View Floorplan
        </button>
      </div>
    </div>
  </div>

  <!-- Popup for floorplan image -->
  <q-dialog v-model="showPlanDialog">
    <q-card class="q-pa-none">
      <q-img :src="selectedPlanImage" />
    </q-card>
  </q-dialog>
</template>
```

### Updated Vue Script:

```javascript
<script setup>
import { ref, onMounted, onUnmounted } from 'vue'

const selectedPlan = ref('2 Storey Semi-D A') // Default selected plan
const showPlanDialog = ref(false) // For showing the floorplan in a dialog
const selectedPlanImage = ref('') // To hold the image source for floorplan

// Property data (This can be extended or dynamic)
const property = ref({
  name: 'Monarc Homes',
  price: 'RM500,000',
})

// Floorplan data (This can also be dynamic or fetched from an API)
const floorplan = ref({
  'Monarc Homes': [
    {
      '2 Storey Semi-D A': [
        { area: '1,800 sqft', bedroom: 4, bathroom: 3, plan: 'src/assets/currentproject/house1.jpg', brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf' }
      ],
      '2 Storey Semi-D B': [
        { area: '2,800 sqft', bedroom: 5, bathroom: 4, plan: 'src/assets/currentproject/house2.jpg', brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf' }
      ]
    }
  ]
})

// Reactive variable to track screen size for responsiveness
const screenBelow540px = ref(window.innerWidth < 540)

// Function to update screen size state
const checkScreenSize = () => {
  screenBelow540px.value = window.innerWidth < 540
}

// Attach and detach event listeners for resizing
onMounted(() => {
  window.addEventListener('resize', checkScreenSize)
  checkScreenSize() // Initial check on load
})

onUnmounted(() => {
  window.removeEventListener('resize', checkScreenSize)
})

// Function to download the brochure for the selected plan
const downloadBrochure = () => {
  const selectedPlanData = getSelectedPlanData()
  if (selectedPlanData && selectedPlanData.brochure) {
    const link = document.createElement('a')
    link.href = selectedPlanData.brochure
    link.download = 'Brochure.pdf' // Set the file name for the download
    link.click()
  }
}

// Function to view the floorplan image in a dialog
const viewFloorplan = () => {
  const selectedPlanData = getSelectedPlanData()
  if (selectedPlanData && selectedPlanData.plan) {
    selectedPlanImage.value = selectedPlanData.plan
    showPlanDialog.value = true
  }
}

// Helper function to get the selected plan data
const getSelectedPlanData = () => {
  const selectedPlanData = floorplan.value[property.value.name][0]
  for (const planType in selectedPlanData) {
    if (planType === selectedPlan.value) {
      return selectedPlanData[planType][0] // Return the first object for the selected plan
    }
  }
  return null
}
</script>
```

### Updated CSS:

```css
<style scoped>
.floorplan-section {
  padding: 20px 5%;
  font-family: Arial, sans-serif;
  text-align: center;
}

.floorplan-title {
  padding-top: 50px;
  font-size: 48px;
  line-height: 48px;
  font-weight: bold;
  color: #1e1e1e;
}

.floorplan-container {
  background-color: white;
  border: 1px solid #ddd;
  padding: 20px 5%;
}

.floorplan-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  background-color: #08463c;
  color: white;
}

.plan-select {
  padding: 5px;
  font-size: 17px;
  color: white;
}

.custom-select {
  width: 100%;
  max-width: 300px;
  background-color: #08463c;
  color: white;
  border: 1px solid #727272;
  padding: 10px 16px;
  font-size: 16px;
  border-radius: 3px;
  cursor: pointer;
  transition: background-color 0.3s ease, color 0.3s ease;
}

.custom-select:hover {
  background-color: #0a5b4d;
}

.floorplan-details {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  flex-wrap: wrap;
}

.details-grid {
  display: flex;
  justify-content: center;
  gap: 20px;
}

.details-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  width: 190px;
  min-height: 200px;
}

.details-item p {
  font-size: 17px;
  line-height: 27px;
  color: #000000;
}

.icon-3 {
  width: 60px;
  margin-bottom: 10px;
}

.floorplan-buttons {
  margin-top: 20px;
  display: flex;
  justify-content: center;
  gap: 20px;
}

.btn {
  display: flex;
  align-items: center;
  padding: 10px 20px;
  border: 1px solid #ccc;
  background: #fff;
  cursor: pointer;
  font-size: 14px;
  font-weight: bold;
  white-space: nowrap;
}

.download-btn {
  border: 2px solid #08463c;
  color: #08463c;
}

.view-btn {
  border: 2px solid #08463c;
  color: #08463c;
}

.btn img {
  width: 16px;
  height: 16px;
  margin-right: 10px;
}

.btn:hover {
  background-color: #08463c;
  color: white;
}

.download-btn:hover img,
.view-btn:hover img {
  filter: invert(1);
}

@media (max-width: 600px) {
  .details-grid {
    flex-direction: column;
    align-items: center;
  }
}
</style>
```

### Key Changes:

1. **Vue reactivity**: `ref` is used for reactive variables like `selectedPlan`, `showPlanDialog`, and `selectedPlanImage`.
2. **Screen size handling**: The `checkScreenSize` function dynamically updates the `screenBelow540px` variable based on window size, which can be used to apply specific CSS for responsiveness.
3. **Brochure Download**: Clicking the "Download Brochure" button triggers a download of the selected plan's brochure.
4. **Popup Floorplan**: Clicking the "View Floorplan" button shows a floorplan in a popup dialog using the Quasar dialog component.
5. **Updated Plan Data**: The `getSelectedPlanData` method retrieves the correct data for the selected floorplan type, allowing the template to display the corresponding plan's details.

This code structure makes it easier to handle dynamic data for multiple properties, while ensuring the design is responsive and user-friendly across devices.
























To implement the requested functionality—allowing the PDF to open and the floor plan image to display in a popup almost fullscreen—you can follow these steps:

### Updated Vue Code
Modify the `viewFloorPlan` function to update the `selectedPlanImage` and use it in the popup dialog.

#### Changes in `<script setup>`
```vue
const showPlanDialog = ref(false); // Controls the visibility of the image popup
const selectedPlanImage = ref(''); // Stores the selected plan image

// Function to open the image popup
const openImage = (plan) => {
  selectedPlanImage.value = plan;
  showPlanDialog.value = true;
};
```

#### Changes in the `floorplan-buttons` section
Update the `openImage` button to pass the plan image URL.

```vue
<button
  @click="openImage(plans[0].plan)"
  class="btn view-btn"
>
  <img src="src/assets/area.svg" alt="View" />
  View Floorplan
</button>
```

#### Popup Section
Ensure the `q-dialog` and `q-img` display the selected image.

```vue
<q-dialog v-model="showPlanDialog" persistent>
  <q-card class="q-pa-none">
    <q-img :src="selectedPlanImage" style="max-height: 90vh; max-width: 90vw;" />
  </q-card>
</q-dialog>
```

### Updated Styles
Add styles to make the popup image appear near full screen while maintaining responsiveness.

```css
.q-dialog img {
  width: 100%;
  height: auto;
  max-width: 90vw;
  max-height: 90vh;
  object-fit: contain;
}
```

### PDF Viewer Feature
Use the `downloadBrochure` function to open the PDF directly in a new tab.

#### Changes in the `floorplan-buttons` section
Ensure the PDF is opened correctly.

```vue
<button
  @click="downloadBrochure(plans[0].brochure)"
  class="btn download-btn"
>
  <img src="src/assets/brochure.svg" alt="Download" />
  Download Brochure
</button>
```

### Full Code Example

#### Vue Component Updates
```vue
<script setup>
import { ref, onMounted, onUnmounted } from 'vue';

const properties = [
  {
    id: 1,
    name: 'Monarc Homes',
    location: 'Kalimantan, Mana',
    type: '2-Storey Terrace & Semi-D',
    price: 'RM500,000',
    status: 'Current',
    image: 'src/assets/currentproject/house1.jpg',
    features: ['Exclusive Amenities', 'Spacious Homes', 'Green Spaces'],
    description: `The Camellia, your home at Wetlands Estates, the
    private enclave in Gamuda Cove.he Camellia, your home at Wetlands Estates, the
    private enclave in Gamuda Cove.`,
    gallery: ['https://picsum.photos/200/300', 'https://picsum.photos/200/300', 'https://picsum.photos/200/300'],
  },
];

const floorplan = {
  'Monarc Homes': [
    {
      '2 Storey Semi-D A': [{ area: '1,800 sqft', bedroom: 4, bathroom: 3, plan: 'src/assets/currentproject/house1.jpg', brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf' }],
      '2 Storey Semi-D B': [{ area: '2,800 sqft', bedroom: 5, bathroom: 4, plan: 'src/assets/currentproject/house1.jpg', brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf' }],
    },
  ],
};

const selectedPlan = ref('2 Storey Semi-D A'); // Default selected plan
const showPlanDialog = ref(false); // Image popup visibility
const selectedPlanImage = ref(''); // Stores the selected image
const screenBelow540px = ref(window.innerWidth < 540); // Screen size detection

// Update screen size state
const checkScreenSize = () => {
  screenBelow540px.value = window.innerWidth < 540;
};

onMounted(() => {
  window.addEventListener('resize', checkScreenSize);
  checkScreenSize(); // Initial check
});

onUnmounted(() => {
  window.removeEventListener('resize', checkScreenSize);
});

// Open the PDF brochure
const downloadBrochure = (brochure) => {
  window.open(brochure, '_blank');
};

// Open the image popup
const openImage = (plan) => {
  selectedPlanImage.value = plan;
  showPlanDialog.value = true;
};
</script>
```

This implementation ensures that the floor plan image is displayed in a responsive popup, while the PDF is opened directly in a new browser tab. Let me know if further enhancements are needed!






















To fix the issue where the popup images do not show up, we need to ensure that the correct path to the images is being passed and that the Quasar `q-img` component is properly configured. Here's how you can debug and resolve the problem:

### Steps to Fix

1. **Check Image Path**: Ensure the `plan` path being passed to the `openImage` function is correct and accessible. The path should be relative to your project or hosted publicly if you're using local files.

2. **Debugging the `openImage` Function**:
   - Add a console log inside the `openImage` function to check if the `plan` URL is being passed correctly:
     ```javascript
     const openImage = (plan) => {
       console.log('Plan Image Path:', plan);
       selectedPlanImage.value = plan;
       showPlanDialog.value = true;
     };
     ```

3. **Validate the `q-img` Component**: Ensure the `q-img` component is receiving the correct `src` value:
   ```vue
   <q-img :src="selectedPlanImage" style="max-height: 90vh; max-width: 90vw;" />
   ```

4. **Handle Static Assets in Vue**:
   - If the images are stored in the `src/assets` folder, use `import.meta.url` or the `require()` function to resolve the paths properly.
   - Replace direct strings like `src/assets/currentproject/house1.jpg` with:
     ```javascript
     plan: new URL('src/assets/currentproject/house1.jpg', import.meta.url).href
     ```

5. **Popup Section Debugging**:
   Ensure the `q-dialog` is correctly linked to `showPlanDialog` and persists on open:
   ```vue
   <q-dialog v-model="showPlanDialog" persistent>
     <q-card class="q-pa-none">
       <q-img :src="selectedPlanImage" style="max-height: 90vh; max-width: 90vw;" />
     </q-card>
   </q-dialog>
   ```

6. **Recheck Style Conflicts**:
   Ensure no CSS conflicts or missing rules prevent the image from rendering. Use the following style:
   ```css
   .q-dialog img {
     width: 100%;
     height: auto;
     max-width: 90vw;
     max-height: 90vh;
     object-fit: contain;
   }
   ```

### Full Updated Example

#### `openImage` Debugged Function
```javascript
const openImage = (plan) => {
  console.log('Plan Image Path:', plan); // Debugging
  selectedPlanImage.value = plan; // Set the selected image
  showPlanDialog.value = true; // Open the dialog
};
```

#### Ensure Correct Image Paths
Update your `floorplan` data to use `import.meta.url` for the image paths:
```javascript
const floorplan = {
  'Monarc Homes': [
    {
      '2 Storey Semi-D A': [
        {
          area: '1,800 sqft',
          bedroom: 4,
          bathroom: 3,
          plan: new URL('src/assets/currentproject/house1.jpg', import.meta.url).href,
          brochure: new URL('src/assets/reports/BILL GATES AND MICROSOFT.pdf', import.meta.url).href,
        },
      ],
      '2 Storey Semi-D B': [
        {
          area: '2,800 sqft',
          bedroom: 5,
          bathroom: 4,
          plan: new URL('src/assets/currentproject/house2.jpg', import.meta.url).href,
          brochure: new URL('src/assets/reports/BILL GATES AND MICROSOFT.pdf', import.meta.url).href,
        },
      ],
    },
  ],
};
```

#### Popup Section in Template
```vue
<q-dialog v-model="showPlanDialog" persistent>
  <q-card class="q-pa-none">
    <q-img
      v-if="selectedPlanImage"
      :src="selectedPlanImage"
      style="max-height: 90vh; max-width: 90vw;"
      spinner-color="primary"
      error="Image could not be loaded."
    />
  </q-card>
</q-dialog>
```

#### Ensure Brochure and Image Buttons Work
```vue
<button
  @click="downloadBrochure(plans[0].brochure)"
  class="btn download-btn"
>
  <img src="src/assets/brochure.svg" alt="Download" />
  Download Brochure
</button>
<button
  @click="openImage(plans[0].plan)"
  class="btn view-btn"
>
  <img src="src/assets/area.svg" alt="View" />
  View Floorplan
</button>
```

### Verify the Solution
1. Check the browser's developer console for any errors related to the `plan` path.
2. Verify that the images load correctly using their URLs directly in the browser.
3. Ensure all assets are placed correctly within the `src/assets` folder or served from a public URL.

Let me know if you're still facing issues!






























<template>
  <div class="q-pa-md q-gutter-sm">
    <q-btn label="Small" color="primary" @click="small = true" />
    <q-btn label="Medium" color="primary" @click="medium = true" />
    <q-btn label="Full Width" color="primary" @click="fullWidth = true" />
    <q-btn label="Full Height" color="primary" @click="fullHeight = true" />

    <q-dialog
      v-model="small"
    >
      <q-card style="width: 300px">
        <q-card-section>
          <div class="text-h6">Small</div>
        </q-card-section>

        <q-card-section class="q-pt-none">
          Click/Tap on the backdrop.
        </q-card-section>

        <q-card-actions align="right" class="bg-white text-teal">
          <q-btn flat label="OK" v-close-popup />
        </q-card-actions>
      </q-card>
    </q-dialog>

    <q-dialog
      v-model="medium"
    >
      <q-card style="width: 700px; max-width: 80vw;">
        <q-card-section>
          <div class="text-h6">Medium</div>
        </q-card-section>

        <q-card-section class="q-pt-none">
          Click/Tap on the backdrop.
        </q-card-section>

        <q-card-actions align="right" class="bg-white text-teal">
          <q-btn flat label="OK" v-close-popup />
        </q-card-actions>
      </q-card>
    </q-dialog>

    <q-dialog
      v-model="fullWidth"
      full-width
    >
      <q-card>
        <q-card-section>
          <div class="text-h6">Full Width</div>
        </q-card-section>

        <q-card-section class="q-pt-none">
          Click/Tap on the backdrop.
        </q-card-section>

        <q-card-actions align="right" class="bg-white text-teal">
          <q-btn flat label="OK" v-close-popup />
        </q-card-actions>
      </q-card>
    </q-dialog>

    <q-dialog
      v-model="fullHeight"
      full-height
    >
      <q-card class="column full-height" style="width: 300px">
        <q-card-section>
          <div class="text-h6">Full Height</div>
        </q-card-section>

        <q-card-section class="col q-pt-none">
          Click/Tap on the backdrop.
        </q-card-section>

        <q-card-actions align="right" class="bg-white text-teal">
          <q-btn flat label="OK" v-close-popup />
        </q-card-actions>
      </q-card>
    </q-dialog>
  </div>
</template>

<script>
import { ref } from 'vue'

export default {
  setup () {
    return {
      small: ref(false),
      medium: ref(false),
      fullWidth: ref(false),
      fullHeight: ref(false)
    }
  }
}
</script>



































To center the layout and fix the appearance issues when switching types, you can make the following adjustments:

### **CSS Adjustments**
1. Ensure the container aligns its child items centrally.
2. Refactor the `flex` properties for the grid and buttons.

Update your **CSS** like this:

```css
/* General Centering */
.floorplan-details {
  display: flex;
  justify-content: center; /* Center items horizontally */
  align-items: center;
  margin-top: 20px;
  flex-wrap: wrap; /* Allow items to wrap properly */
}

/* Update the grid layout */
.details-grid-items {
  display: flex;
  justify-content: center; /* Center items */
  align-items: center;
  gap: 30px;
  flex-wrap: wrap; /* Wrap grid items */
}

/* Center individual items */
.details-item {
  text-align: center; /* Center content */
  padding: 20px;
  width: 200px;
  min-height: 200px;
}

.floorplan-buttons {
  display: flex;
  justify-content: center; /* Center buttons */
  gap: 20px;
  margin-top: 20px;
}

/* Add responsive behavior */
@media (max-width: 768px) {
  .details-grid {
    flex-direction: column; /* Stack items vertically */
    align-items: center;
  }
}
```

### **Why It Works**
1. `justify-content: center` ensures everything aligns in the center horizontally.
2. `flex-wrap: wrap` allows flexibility when items overflow.
3. `text-align: center` makes the content like text and images align centrally.
4. Responsive media queries adjust the layout for smaller screens.

---

### **HTML Review**
Ensure no redundant `v-for` loops or improperly nested elements that might conflict with styling. For example:
- `details-floorplan` should only render for the selected plan.

Example clean-up:
```html
<div v-if="selectedPlan === planType" class="details-floorplan">
  <div class="details-grid-items">
    <!-- Bedrooms -->
    <div class="details-item">
      <img src="src/assets/bed.png" alt="Bedrooms" class="icon-3" />
      <p>{{ plans[0].bedroom }} Bedrooms</p>
    </div>
    <!-- Bathrooms -->
    <div class="details-item">
      <img src="src/assets/bathroom.svg" alt="Bathrooms" class="icon-3" />
      <p>{{ plans[0].bathroom }} Bathrooms</p>
    </div>
    <!-- Area -->
    <div class="details-item">
      <img src="src/assets/area.svg" alt="Area" class="icon-3" />
      <p>{{ plans[0].area }}</p>
    </div>
  </div>
</div>
```

### **Result**
1. The layout will remain clean and centered when switching plan types.
2. Buttons and grid items align centrally for a consistent look.

Let me know if further adjustments are needed! 😊






















/* Custom select container */
.custom-select {
  position: relative;
  width: 200px; /* Adjust as needed */
}

/* Default arrow (down) */
.custom-select::after {
  content: '\25BC'; /* Down arrow Unicode */
  position: absolute;
  top: 50%;
  right: 10px; /* Adjust spacing */
  transform: translateY(-50%);
  font-size: 14px; /* Arrow size */
  color: #333; /* Arrow color */
  pointer-events: none; /* Ensures arrow doesn't block clicks */
  transition: transform 0.3s ease; /* Smooth rotation */
}

/* Hide default select arrow */
.custom-select select {
  appearance: none; /* Remove native arrow */
  -webkit-appearance: none;
  -moz-appearance: none;
  padding-right: 30px; /* Leave space for the arrow */
  width: 100%;
  cursor: pointer;
}

/* Rotate arrow when select is focused or active */
.custom-select select:focus + ::after {
  transform: translateY(-50%) rotate(180deg); /* Rotate arrow */
}


Ah, I see what you mean! You want the **arrow** to point **down** when the select menu is **closed** and rotate to point **up** when the select menu is **opened**.

To achieve this effect, you can combine **CSS pseudo-elements** with the `:focus` or `:active` state to rotate the arrow when interacting with the `<select>` element.

---

### **Solution**

Here’s how to create an arrow that changes direction based on the select state.

---

### **CSS Code**

```css
/* Custom select container */
.custom-select {
  position: relative;
  width: 200px; /* Adjust as needed */
}

/* Default arrow (down) */
.custom-select::after {
  content: '\25BC'; /* Down arrow Unicode */
  position: absolute;
  top: 50%;
  right: 10px; /* Adjust spacing */
  transform: translateY(-50%);
  font-size: 14px; /* Arrow size */
  color: #333; /* Arrow color */
  pointer-events: none; /* Ensures arrow doesn't block clicks */
  transition: transform 0.3s ease; /* Smooth rotation */
}

/* Hide default select arrow */
.custom-select select {
  appearance: none; /* Remove native arrow */
  -webkit-appearance: none;
  -moz-appearance: none;
  padding-right: 30px; /* Leave space for the arrow */
  width: 100%;
  cursor: pointer;
}

/* Rotate arrow when select is focused or active */
.custom-select select:focus + ::after {
  transform: translateY(-50%) rotate(180deg); /* Rotate arrow */
}
```

---

### **HTML Structure**

Here is the structure for the custom select box:

```html
<div class="custom-select">
  <select>
    <option>Select an option</option>
    <option>Option 1</option>
    <option>Option 2</option>
    <option>Option 3</option>
  </select>
</div>
```

---

### **How It Works**
1. **Default State**: The arrow is a downward-pointing Unicode character (`\25BC`) positioned using `::after`.
2. **Focus/Active State**: When the `select` gains focus (or is interacted with), the `::after` pseudo-element is rotated **180 degrees** to point upwards.
3. **Smooth Transition**: The `transition` property adds a smooth rotation effect.

---

### **Key Notes**
1. **Appearance Reset**: `appearance: none` hides the default arrow provided by browsers.
2. **Interaction State**: The `:focus` state triggers the rotation. You can also use `:hover` or `:active` for additional interaction.

---

### **Result**
- The arrow will **point down** when the select box is not active.
- When clicked (or focused), the arrow will **rotate upward** to indicate an open state.

Let me know if you need further modifications or clarification! 😊




















To apply the arrow effect (down and up) to your **Vue.js select component**, you need to wrap the `<select>` element with a `div` to add custom styling using pseudo-elements. Here's the updated implementation:

---

### **Updated Code with Custom Arrow**

```html
<div class="custom-select">
  <select v-model="selectedPlan" id="planSelect" class="select-box">
    <option
      v-for="(plans, planType) in floorplan[property.name][0]"
      :key="planType"
      :value="planType"
    >
      {{ planType }}
    </option>
  </select>
</div>
```

---

### **CSS for Custom Select with Arrow**

```css
/* Custom select wrapper */
.custom-select {
  position: relative;
  width: 100%; /* Adjust width as needed */
}

/* Hide the default browser arrow */
.select-box {
  appearance: none; /* Remove native arrow */
  -webkit-appearance: none;
  -moz-appearance: none;
  width: 100%;
  padding: 10px 30px 10px 10px; /* Space for the custom arrow */
  font-size: 16px;
  cursor: pointer;
  border: 1px solid #ccc; /* Add border for styling */
  border-radius: 4px;
}

/* Default arrow (down) */
.custom-select::after {
  content: '\25BC'; /* Unicode for down arrow */
  position: absolute;
  top: 50%;
  right: 10px; /* Adjust position */
  transform: translateY(-50%);
  font-size: 14px;
  color: #333;
  pointer-events: none; /* Make arrow non-clickable */
  transition: transform 0.3s ease; /* Smooth rotation */
}

/* Arrow rotates when the select box is clicked */
.select-box:focus + .custom-select::after,
.select-box:active + .custom-select::after {
  transform: translateY(-50%) rotate(180deg); /* Rotate arrow up */
}
```

---

### **Explanation**
1. **HTML**:
   - Wrap the `<select>` in a parent `<div>` (`custom-select`) to allow pseudo-elements like `::after` for the arrow.
   - The `:value` attribute in Vue.js is retained as is.

2. **CSS**:
   - Use `appearance: none` to hide the default browser arrow.
   - Add a `::after` pseudo-element for the **custom arrow**.
   - On `:focus` or `:active` of the `<select>`, the `transform` rotates the arrow **180 degrees** to point up.

---

### **Vue-Friendly Behavior**
This approach integrates seamlessly with Vue.js, as no JavaScript is needed to toggle the arrow—CSS handles the state changes with the `:focus` selector.

Let me know if you need further refinements or additional styles! 😊














  <!-- Popup for floorplan image -->
  <q-dialog v-model="showPlanDialog" full-height full-width class="dialog-popup">
      <q-card-actions v-close-popup >
        <q-img
      v-if="selectedPlanImage"
      :src="selectedPlanImage"
      class="image-popup"
      error="Image could not be loaded."
      />
    </q-card-actions>
    </q-dialog>






<div id="floorplanPopup" class="popup-overlay">
  <div class="popup-content">
    <div class="popup-header">
      <span id="popupTitle">FloorPlan - HestonHills_TypeA1_A2</span>
      <button id="closePopup" class="close-button">&times;</button>
    </div>
    <div class="popup-body">
      <img src="floorplan.png" alt="Floor Plan" class="floorplan-image" />
      <div class="popup-footer">
        <p>TYPE A1 & A2</p>
        <p>22' x 70'</p>
        <p>Intermediate Lot | Built-up 2,197 sq. ft.</p>
        <p>4 Bedrooms | 4 Bathrooms | 2 Carparks</p>
      </div>
    </div>
  </div>
</div>

/* Popup overlay styling */
.popup-overlay {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  z-index: 1000;
  overflow: auto;
}

/* Popup content styling */
.popup-content {
  background: #fff;
  margin: 5% auto;
  padding: 20px;
  border-radius: 8px;
  max-width: 900px;
  text-align: center;
  position: relative;
}

/* Header styling */
.popup-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 18px;
  font-weight: bold;
  margin-bottom: 20px;
}

/* Close button styling */
.close-button {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
}

/* Floorplan image */
.floorplan-image {
  max-width: 100%;
  height: auto;
  border: 1px solid #ddd;
  border-radius: 4px;
  margin-bottom: 20px;
}

/* Footer styling */
.popup-footer p {
  margin: 5px 0;
  font-size: 16px;
  color: #666;
}


// Select popup and close button elements
const popup = document.getElementById('floorplanPopup');
const closePopup = document.getElementById('closePopup');

// Open popup function
function openPopup() {
  popup.style.display = 'block';
}

// Close popup function
closePopup.addEventListener('click', () => {
  popup.style.display = 'none';
});

// Close popup when clicking outside the content
window.addEventListener('click', (event) => {
  if (event.target === popup) {
    popup.style.display = 'none';
  }
});






<!-- Dropdown for selecting floor plans -->
<div class="dropdown-container">
  <label for="planSelect">Select Floor Plan:</label>
  <select v-model="selectedPlan" id="planSelect" @change="openPopup">
    <option
      v-for="(plans, planType) in floorplan[property.name][0]"
      :key="planType"
      :value="planType"
    >
      {{ planType }}
    </option>
  </select>
</div>

<!-- Popup for displaying floor plans -->
<div class="popup" v-if="isPopupOpen">
  <div class="popup-content">
    <button class="close-btn" @click="closePopup">×</button>
    <h2 class="popup-title">{{ selectedPlanTitle }}</h2>
    <p class="popup-description">
      {{ selectedPlanDetails }}
    </p>
    <img
      :src="selectedPlanImage"
      alt="Floor Plan"
      class="floorplan-image"
    />
  </div>
</div>


data() {
  return {
    selectedPlan: null, // Track the selected floor plan
    isPopupOpen: false, // Track popup visibility
    floorplan: {
      'Heston Hills': [
        {
          // Example floorplan data (update this with actual data)
          'TYPE A1 & A2': {
            title: 'TYPE A1 & A2',
            details: "22' x 70' | Intermediate lot | Built-up: 2,197 sq. ft. | 4 bedrooms, 4 bathrooms, 2 car parks",
            image: 'path-to-floorplan-image.png',
          },
          'TYPE B1': {
            title: 'TYPE B1',
            details: "22' x 75' | Corner lot | Built-up: 2,500 sq. ft. | 5 bedrooms, 4 bathrooms, 3 car parks",
            image: 'path-to-another-floorplan-image.png',
          },
        },
      ],
    },
  };
},
computed: {
  selectedPlanTitle() {
    return this.selectedPlan
      ? this.floorplan['Heston Hills'][0][this.selectedPlan].title
      : '';
  },
  selectedPlanDetails() {
    return this.selectedPlan
      ? this.floorplan['Heston Hills'][0][this.selectedPlan].details
      : '';
  },
  selectedPlanImage() {
    return this.selectedPlan
      ? this.floorplan['Heston Hills'][0][this.selectedPlan].image
      : '';
  },
},
methods: {
  openPopup() {
    if (this.selectedPlan) {
      this.isPopupOpen = true;
    }
  },
  closePopup() {
    this.isPopupOpen = false;
  },
},


/* Dropdown Container Styling */
.dropdown-container {
  margin: 20px;
  text-align: center;
}

#planSelect {
  font-size: 1rem;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  appearance: none;
  background: #fff url('data:image/svg+xml;charset=US-ASCII,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 4 5"><path fill="none" stroke="%23000" stroke-width=".5" d="M2 0L0 2h4zm0 5L0 3h4z"/></svg>')
    no-repeat right 10px center;
  background-size: 12px;
}

/* Popup styling (from earlier) remains the same */











<template>
  <div>
    <!-- Dropdown to select floor plan -->
    <label for="planSelect">Select Floor Plan:</label>
    <select id="planSelect" v-model="selectedPlan" @change="updateSelectedPlanDetails">
      <option
        v-for="(plan, planType) in floorplan['Monarc Homes'][0]"
        :key="planType"
        :value="planType"
      >
        {{ planType }}
      </option>
    </select>

    <!-- Display selected floor plan details -->
    <div class="plan-details">
      <p><strong>Area:</strong> {{ selectedPlanDetails.area }}</p>
      <p><strong>Bedrooms:</strong> {{ selectedPlanDetails.bedroom }}</p>
      <p><strong>Bathrooms:</strong> {{ selectedPlanDetails.bathroom }}</p>
      <button @click="downloadBrochure">Download Brochure</button>
    </div>

    <!-- Popup to display floor plan image -->
    <div v-if="showPopup" class="popup-overlay" @click="closePopup">
      <div class="popup-content" @click.stop>
        <button class="close-btn" @click="closePopup">×</button>
        <img :src="selectedPlanImage" alt="Floor Plan" class="popup-image" />
      </div>
    </div>
  </div>
</template>


<script setup>
import { ref, onMounted, onUnmounted } from 'vue'

const properties = [
  {
    id: 1,
    name: 'Monarc Homes',
    location: 'Kalimantan, Mana',
    type: '2-Storey Terrace & Semi-D',
    price: 'RM500,000',
    status: 'Current',
    image: 'src/assets/currentproject/house1.jpg',
    features: ['Exclusive Amenities', 'Spacious Homes', 'Green Spaces'],
    description: `The Camellia, your home at Wetlands Estates, the
    private enclave in Gamuda Cove.`,
    gallery: [
      'https://picsum.photos/200/300',
      'https://picsum.photos/200/300',
      'https://picsum.photos/200/300'
    ]
  }
]

const floorplan = {
  'Monarc Homes': [
    {
      '2 Storey Semi-D A': [
        {
          area: '1,800 sqft',
          bedroom: 4,
          bathroom: 3,
          plan: 'src/assets/currentproject/house2.jpg',
          brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf'
        }
      ],
      '2 Storey Semi-D B': [
        {
          area: '2,800 sqft',
          bedroom: 5,
          bathroom: 4,
          plan: 'src/assets/currentproject/house3.jpg',
          brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf'
        }
      ]
    }
  ]
}

const selectedPlan = ref('2 Storey Semi-D A') // Default selected plan
const selectedPlanDetails = ref({})
const selectedPlanImage = ref('')
const showPopup = ref(false)
const screenBelow540px = ref(window.innerWidth < 540)

// Function to update screen size state
const checkScreenSize = () => {
  screenBelow540px.value = window.innerWidth < 540
}

// Attach and detach event listeners
onMounted(() => {
  window.addEventListener('resize', checkScreenSize)
  checkScreenSize() // Initial check
  updateSelectedPlanDetails() // Initialize details for the default plan
})

onUnmounted(() => {
  window.removeEventListener('resize', checkScreenSize)
})

// Update selected plan details based on dropdown selection
const updateSelectedPlanDetails = () => {
  const propertyName = 'Monarc Homes' // Adjust if multiple properties
  const plans = floorplan[propertyName][0]
  selectedPlanDetails.value = plans[selectedPlan.value][0]
}

// Open popup with the selected floor plan image
const openImage = () => {
  selectedPlanImage.value = selectedPlanDetails.value.plan
  showPopup.value = true
}

// Close popup
const closePopup = () => {
  showPopup.value = false
}

// Download brochure for the selected plan
const downloadBrochure = () => {
  const brochure = selectedPlanDetails.value.brochure
  if (brochure) {
    window.open(brochure, '_blank')
  }
}
</script>


/* Dropdown Styling */
label {
  display: block;
  margin-bottom: 8px;
  font-weight: bold;
}

#planSelect {
  font-size: 16px;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

/* Floor Plan Details */
.plan-details {
  margin-top: 16px;
}

/* Popup Styling */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.popup-content {
  background: #fff;
  padding: 20px;
  border-radius: 8px;
  text-align: center;
  position: relative;
}

.close-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  background: transparent;
  border: none;
  font-size: 18px;
  cursor: pointer;
}

.popup-image {
  max-width: 100%;
  height: auto;
  display: block;
}
















<template>
  <!-- Floor Plan Section -->
  <div class="floorplan-section">
    <h2 class="floorplan-title">Floorplan</h2>
    <div class="floorplan-container">
      <!-- Header Section -->
      <div class="floorplan-header">
        <div class="plan-select">
          <select v-model="selectedPlan" class="custom-select">
            <option
              v-for="(plans, planType) in floorplan[property.name][0]"
              :key="planType"
              :value="planType"
            >
              {{ planType }}
            </option>
          </select>
        </div>
        <div class="plan-price">
          Price From <span class="price">{{ property.price }}</span>
        </div>
      </div>

      <!-- Details Section -->
      <div class="floorplan-details">
        <div
          v-for="(plans, planType) in floorplan[property.name][0]"
          :key="planType"
        >
          <div v-if="selectedPlan === planType" class="details-floorplan">
            <div class="details-grid-items">
              <div class="details-grid">
                <!-- Bedrooms -->
                <div class="details-item">
                  <img src="src/assets/bed.png" alt="Bedrooms" class="icon-3" />
                  <p>{{ plans[0].bedroom }} Bedrooms</p>
                </div>
                <!-- Bathrooms -->
                <div class="details-item">
                  <img
                    src="src/assets/bathroom.svg"
                    alt="Bathrooms"
                    class="icon-3"
                  />
                  <p>{{ plans[0].bathroom }} Bathrooms</p>
                </div>
                <!-- Area -->
                <div class="details-item">
                  <img src="src/assets/area.svg" alt="Area" class="icon-3" />
                  <p>{{ plans[0].area }}</p>
                </div>
              </div>

              <!-- Buttons Section -->
              <div class="floorplan-buttons">
                <button
                  @click="downloadBrochure(plans[0].brochure)"
                  class="btn download-btn"
                >
                  <img src="src/assets/brochure.svg" alt="Download" />
                  Download Brochure
                </button>
                <button
                  @click="openImage(plans[0].plan)"
                  class="btn view-btn"
                >
                  <img src="src/assets/area.svg" alt="View" />
                  View Floorplan
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Popup for floorplan image -->
  <div class="popup" v-if="showPopup">
    <div class="popup-content">
      <button class="close-btn" @click="closePopup">×</button>
      <h2 class="popup-title">{{ selectedPlan }}</h2>
      <img
        :src="selectedPlanImage"
        alt="Floorplan"
        class="popup-image"
      />
    </div>
  </div>
</template>


<script setup>
import { ref } from 'vue'

const property = {
  name: 'Monarc Homes',
  price: 'RM500,000',
}

const floorplan = {
  'Monarc Homes': [
    {
      '2 Storey Semi-D A': [
        {
          area: '1,800 sqft',
          bedroom: 4,
          bathroom: 3,
          plan: 'src/assets/currentproject/house2.jpg',
          brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf',
        },
      ],
      '2 Storey Semi-D B': [
        {
          area: '2,800 sqft',
          bedroom: 5,
          bathroom: 4,
          plan: 'src/assets/currentproject/house3.jpg',
          brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf',
        },
      ],
    },
  ],
}

const selectedPlan = ref('2 Storey Semi-D A') // Default selected plan
const showPopup = ref(false)
const selectedPlanImage = ref('')

// Function to download the brochure
const downloadBrochure = (brochure) => {
  if (brochure) {
    window.open(brochure, '_blank')
  }
}

// Function to open the floorplan image in the popup
const openImage = (plan) => {
  selectedPlanImage.value = plan
  showPopup.value = true
}

// Function to close the popup
const closePopup = () => {
  showPopup.value = false
}
</script>


.floorplan-section {
  padding: 20px;
  background-color: #f9f9f9;
}

.floorplan-title {
  font-size: 24px;
  margin-bottom: 20px;
  text-align: center;
}

.floorplan-container {
  max-width: 800px;
  margin: 0 auto;
}

.floorplan-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.plan-select select {
  padding: 8px;
  border-radius: 4px;
  border: 1px solid #ccc;
}

.plan-price .price {
  font-weight: bold;
  color: #007bff;
}

.details-grid {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
}

.details-item {
  text-align: center;
}

.icon-3 {
  width: 40px;
  height: 40px;
}

.floorplan-buttons {
  display: flex;
  gap: 10px;
}

.btn {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 10px 15px;
  border-radius: 4px;
  border: none;
  cursor: pointer;
}

.download-btn {
  background-color: #28a745;
  color: white;
}

.view-btn {
  background-color: #007bff;
  color: white;
}

.popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.popup-content {
  background: white;
  padding: 20px;
  border-radius: 10px;
  position: relative;
  text-align: center;
}

.close-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  background: transparent;
  border: none;
  font-size: 20px;
  cursor: pointer;
}

.popup-image {
  max-width: 100%;
  height: auto;
}


<button onclick="openPopup()">View Enlarged Floor Plan</button>























<template>
  <!-- Floor Plan Section -->
  <div class="floorplan-section">
    <h2 class="floorplan-title">Floorplan</h2>
    <div class="floorplan-container">
      <!-- Header Section -->
      <div class="floorplan-header">
        <div class="plan-select">
          <select v-model="selectedPlan" class="custom-select">
            <option
              v-for="(plans, planType) in floorplan[property.name][0]"
              :key="planType"
              :value="planType"
            >
              {{ planType }}
            </option>
          </select>
        </div>
        <div class="plan-price">
          Price From <span class="price">{{ property.price }}</span>
        </div>
      </div>

      <!-- Details Section -->
      <div class="floorplan-details">
        <div
          v-for="(plans, planType) in floorplan[property.name][0]"
          :key="planType"
        >
          <div v-if="selectedPlan === planType" class="details-floorplan">
            <div class="details-grid-items">
              <div class="details-grid">
                <!-- Bedrooms -->
                <div class="details-item">
                  <img src="src/assets/bed.png" alt="Bedrooms" class="icon-3" />
                  <p>{{ plans[0].bedroom }} Bedrooms</p>
                </div>
                <!-- Bathrooms -->
                <div class="details-item">
                  <img
                    src="src/assets/bathroom.svg"
                    alt="Bathrooms"
                    class="icon-3"
                  />
                  <p>{{ plans[0].bathroom }} Bathrooms</p>
                </div>
                <!-- Area -->
                <div class="details-item">
                  <img src="src/assets/area.svg" alt="Area" class="icon-3" />
                  <p>{{ plans[0].area }}</p>
                </div>
              </div>

              <!-- Buttons Section -->
              <div class="floorplan-buttons">
                <button
                  @click="downloadBrochure(plans[0].brochure)"
                  class="btn download-btn"
                >
                  <img src="src/assets/brochure.svg" alt="Download" />
                  Download Brochure
                </button>
                <button
                  @click="openImage(plans[0].plan)"
                  class="btn view-btn"
                >
                  <img src="src/assets/area.svg" alt="View" />
                  View Floorplan
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Popup for floorplan image -->
  <div class="popup" v-if="showPopup">
    <div class="popup-content">
      <button class="close-btn" @click="closePopup">×</button>
      <h2 class="popup-title">{{ selectedPlan }}</h2>
      <div class="popup-image-container">
        <img
          :src="selectedPlanImage"
          alt="Floorplan"
          class="popup-image"
          :style="{ transform: `scale(${zoomLevel})` }"
        />
        <div class="zoom-buttons">
          <button @click="zoomIn" class="btn zoom-btn">Zoom In</button>
          <button @click="zoomOut" class="btn zoom-btn">Zoom Out</button>
        </div>
      </div>
    </div>
  </div>
</template>


<script setup>
import { ref } from 'vue'

const property = {
  name: 'Monarc Homes',
  price: 'RM500,000',
}

const floorplan = {
  'Monarc Homes': [
    {
      '2 Storey Semi-D A': [
        {
          area: '1,800 sqft',
          bedroom: 4,
          bathroom: 3,
          plan: 'src/assets/currentproject/house2.jpg',
          brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf',
        },
      ],
      '2 Storey Semi-D B': [
        {
          area: '2,800 sqft',
          bedroom: 5,
          bathroom: 4,
          plan: 'src/assets/currentproject/house3.jpg',
          brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf',
        },
      ],
    },
  ],
}

const selectedPlan = ref('2 Storey Semi-D A') // Default selected plan
const showPopup = ref(false)
const selectedPlanImage = ref('')
const zoomLevel = ref(1) // Default zoom level

// Function to download the brochure
const downloadBrochure = (brochure) => {
  if (brochure) {
    window.open(brochure, '_blank')
  }
}

// Function to open the floorplan image in the popup
const openImage = (plan) => {
  selectedPlanImage.value = plan
  showPopup.value = true
  zoomLevel.value = 1 // Reset zoom level on opening the popup
  document.body.style.overflow = 'hidden' // Disable scrolling
}

// Function to close the popup
const closePopup = () => {
  showPopup.value = false
  document.body.style.overflow = 'auto' // Enable scrolling
}

// Function to zoom in
const zoomIn = () => {
  if (zoomLevel.value < 3) zoomLevel.value += 0.2 // Max zoom level is 3
}

// Function to zoom out
const zoomOut = () => {
  if (zoomLevel.value > 1) zoomLevel.value -= 0.2 // Min zoom level is 1
}
</script>


.popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.popup-content {
  background: white;
  padding: 20px;
  border-radius: 10px;
  position: relative;
  text-align: center;
  max-width: 90%;
}

.close-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  background: transparent;
  border: none;
  font-size: 20px;
  cursor: pointer;
}

.popup-image-container {
  position: relative;
}

.popup-image {
  max-width: 100%;
  height: auto;
  transition: transform 0.2s ease-in-out;
}

.zoom-buttons {
  margin-top: 10px;
  display: flex;
  gap: 10px;
  justify-content: center;
}

.zoom-btn {
  padding: 10px 15px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.zoom-btn:hover {
  background-color: #0056b3;
}


















<template>
  <!-- Floor Plan Section -->
  <div class="floorplan-section">
    <h2 class="floorplan-title">Floorplan</h2>
    <div class="floorplan-container">
      <!-- Header Section -->
      <div class="floorplan-header">
        <div class="plan-select">
          <select v-model="selectedPlan" class="custom-select">
            <option
              v-for="(plans, planType) in floorplan[property.name][0]"
              :key="planType"
              :value="planType"
            >
              {{ planType }}
            </option>
          </select>
        </div>
        <div class="plan-price">
          Price From <span class="price">{{ property.price }}</span>
        </div>
      </div>

      <!-- Details Section -->
      <div class="floorplan-details">
        <div
          v-for="(plans, planType) in floorplan[property.name][0]"
          :key="planType"
        >
          <div v-if="selectedPlan === planType" class="details-floorplan">
            <div class="details-grid-items">
              <div class="details-grid">
                <!-- Bedrooms -->
                <div class="details-item">
                  <img src="src/assets/bed.png" alt="Bedrooms" class="icon-3" />
                  <p>{{ plans[0].bedroom }} Bedrooms</p>
                </div>
                <!-- Bathrooms -->
                <div class="details-item">
                  <img
                    src="src/assets/bathroom.svg"
                    alt="Bathrooms"
                    class="icon-3"
                  />
                  <p>{{ plans[0].bathroom }} Bathrooms</p>
                </div>
                <!-- Area -->
                <div class="details-item">
                  <img src="src/assets/area.svg" alt="Area" class="icon-3" />
                  <p>{{ plans[0].area }}</p>
                </div>
              </div>

              <!-- Buttons Section -->
              <div class="floorplan-buttons">
                <button
                  @click="downloadBrochure(plans[0].brochure)"
                  class="btn download-btn"
                >
                  <img src="src/assets/brochure.svg" alt="Download" />
                  Download Brochure
                </button>
                <button
                  @click="openImage(plans[0].plan)"
                  class="btn view-btn"
                >
                  <img src="src/assets/area.svg" alt="View" />
                  View Floorplan
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Popup for floorplan image -->
  <div class="popup" v-if="showPopup">
    <div class="popup-content">
      <div class="popup-header">
        <h2 class="popup-title">{{ selectedPlan }}</h2>
        <div class="zoom-controls">
          <button @click="zoomIn" class="btn zoom-btn">Zoom In</button>
          <button @click="zoomOut" class="btn zoom-btn">Zoom Out</button>
        </div>
        <button class="close-btn" @click="closePopup">×</button>
      </div>
      <div
        class="popup-image-container"
        @mousedown="startDragging"
        @mousemove="dragImage"
        @mouseup="stopDragging"
        @mouseleave="stopDragging"
      >
        <img
          :src="selectedPlanImage"
          alt="Floorplan"
          class="popup-image"
          :style="{ transform: `scale(${zoomLevel}) translate(${translateX}px, ${translateY}px)` }"
        />
      </div>
    </div>
  </div>
</template>



<script setup>
import { ref } from 'vue'

const property = {
  name: 'Monarc Homes',
  price: 'RM500,000',
}

const floorplan = {
  'Monarc Homes': [
    {
      '2 Storey Semi-D A': [
        {
          area: '1,800 sqft',
          bedroom: 4,
          bathroom: 3,
          plan: 'src/assets/currentproject/house2.jpg',
          brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf',
        },
      ],
      '2 Storey Semi-D B': [
        {
          area: '2,800 sqft',
          bedroom: 5,
          bathroom: 4,
          plan: 'src/assets/currentproject/house3.jpg',
          brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf',
        },
      ],
    },
  ],
}

const selectedPlan = ref('2 Storey Semi-D A') // Default selected plan
const showPopup = ref(false)
const selectedPlanImage = ref('')
const zoomLevel = ref(1) // Default zoom level

// Dragging-related state
const isDragging = ref(false)
const translateX = ref(0)
const translateY = ref(0)
const lastMouseX = ref(0)
const lastMouseY = ref(0)

// Function to download the brochure
const downloadBrochure = (brochure) => {
  if (brochure) {
    window.open(brochure, '_blank')
  }
}

// Function to open the floorplan image in the popup
const openImage = (plan) => {
  selectedPlanImage.value = plan
  showPopup.value = true
  zoomLevel.value = 1 // Reset zoom level
  translateX.value = 0 // Reset translation
  translateY.value = 0
  document.body.style.overflow = 'hidden' // Disable scrolling
}

// Function to close the popup
const closePopup = () => {
  showPopup.value = false
  document.body.style.overflow = 'auto' // Enable scrolling
}

// Function to zoom in
const zoomIn = () => {
  if (zoomLevel.value < 3) zoomLevel.value += 0.2 // Max zoom level is 3
}

// Function to zoom out
const zoomOut = () => {
  if (zoomLevel.value > 1) zoomLevel.value -= 0.2 // Min zoom level is 1
}

// Dragging functions
const startDragging = (event) => {
  isDragging.value = true
  lastMouseX.value = event.clientX
  lastMouseY.value = event.clientY
}

const dragImage = (event) => {
  if (isDragging.value) {
    const deltaX = event.clientX - lastMouseX.value
    const deltaY = event.clientY - lastMouseY.value
    translateX.value += deltaX / zoomLevel.value
    translateY.value += deltaY / zoomLevel.value
    lastMouseX.value = event.clientX
    lastMouseY.value = event.clientY
  }
}

const stopDragging = () => {
  isDragging.value = false
}
</script>


.popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.popup-content {
  background: white;
  padding: 20px;
  border-radius: 10px;
  position: relative;
  text-align: center;
  max-width: 90%;
  max-height: 90%;
}

.popup-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.zoom-controls {
  display: flex;
  gap: 10px;
}

.popup-image-container {
  position: relative;
  overflow: hidden;
  width: 100%;
  height: 100%;
  cursor: grab;
}

.popup-image {
  position: absolute;
  max-width: none;
  max-height: none;
  transition: transform 0.2s ease-in-out;
}

.close-btn {
  background: transparent;
  border: none;
  font-size: 20px;
  cursor: pointer;
}



















<template>
  <!-- Popup for floorplan image -->
  <div class="popup" v-if="showPopup">
    <div class="popup-content">
      <!-- Header Section -->
      <div class="popup-header">
        <h2 class="popup-title">{{ selectedPlan }}</h2>
        <div class="popup-controls">
          <button @click="zoomIn" class="btn zoom-btn">Zoom In</button>
          <button @click="zoomOut" class="btn zoom-btn">Zoom Out</button>
          <button class="close-btn" @click="closePopup">×</button>
        </div>
      </div>

      <!-- Image Container Section -->
      <div
        class="popup-image-container"
        @mousedown="startDragging"
        @mousemove="dragImage"
        @mouseup="stopDragging"
        @mouseleave="stopDragging"
      >
        <img
          :src="selectedPlanImage"
          alt="Floorplan"
          class="popup-image"
          :style="{
            transform: `translate(${translateX}px, ${translateY}px) scale(${zoomLevel})`,
          }"
        />
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'

const showPopup = ref(false)
const selectedPlan = ref('2 Storey Semi-D A')
const selectedPlanImage = ref('src/assets/currentproject/house2.jpg')
const zoomLevel = ref(1) // Default zoom level
const isDragging = ref(false)
const translateX = ref(0)
const translateY = ref(0)
const lastMouseX = ref(0)
const lastMouseY = ref(0)

// Open popup
const openImage = (image) => {
  selectedPlanImage.value = image
  showPopup.value = true
  zoomLevel.value = 1
  translateX.value = 0
  translateY.value = 0
  document.body.style.overflow = 'hidden'
}

// Close popup
const closePopup = () => {
  showPopup.value = false
  document.body.style.overflow = 'auto'
}

// Zoom in
const zoomIn = () => {
  if (zoomLevel.value < 3) zoomLevel.value += 0.2
}

// Zoom out
const zoomOut = () => {
  if (zoomLevel.value > 1) zoomLevel.value -= 0.2
}

// Start dragging
const startDragging = (event) => {
  isDragging.value = true
  lastMouseX.value = event.clientX
  lastMouseY.value = event.clientY
}

// Drag the image
const dragImage = (event) => {
  if (isDragging.value) {
    const deltaX = event.clientX - lastMouseX.value
    const deltaY = event.clientY - lastMouseY.value
    translateX.value += deltaX
    translateY.value += deltaY
    lastMouseX.value = event.clientX
    lastMouseY.value = event.clientY
  }
}

// Stop dragging
const stopDragging = () => {
  isDragging.value = false
}
</script>






.popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.popup-content {
  background: white;
  padding: 20px;
  border-radius: 10px;
  position: relative;
  max-width: 90%;
  max-height: 90%;
  overflow: hidden; /* Ensures image stays within bounds */
  display: flex;
  flex-direction: column;
}

.popup-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.popup-title {
  flex: 1; /* Makes the title take up remaining space */
  text-align: left;
}

.popup-controls {
  display: flex;
  gap: 10px;
  align-items: center;
}

.close-btn {
  background: transparent;
  border: none;
  font-size: 20px;
  cursor: pointer;
}

.popup-image-container {
  flex: 1; /* Fills remaining space */
  position: relative;
  overflow: hidden; /* Clips the image inside the container */
  cursor: grab;
}

.popup-image {
  position: absolute;
  max-width: none;
  max-height: none;
  transition: transform 0.2s ease-in-out;
  transform-origin: center; /* Keeps the zoom centered */
}



















<script setup>
import { ref } from 'vue'

const showPopup = ref(false)
const selectedPlan = ref('2 Storey Semi-D A')
const selectedPlanImage = ref('src/assets/currentproject/house2.jpg')
const zoomLevel = ref(1) // Default zoom level
const isDragging = ref(false)
const translateX = ref(0)
const translateY = ref(0)
const lastMouseX = ref(0)
const lastMouseY = ref(0)

// Open popup
const openImage = (image) => {
  selectedPlanImage.value = image
  showPopup.value = true
  resetImagePosition()
  document.body.style.overflow = 'hidden'
}

// Close popup
const closePopup = () => {
  showPopup.value = false
  document.body.style.overflow = 'auto'
}

// Reset image position and zoom
const resetImagePosition = () => {
  zoomLevel.value = 1
  translateX.value = 0
  translateY.value = 0
}

// Zoom in
const zoomIn = () => {
  if (zoomLevel.value < 3) zoomLevel.value += 0.2
}

// Zoom out
const zoomOut = () => {
  if (zoomLevel.value > 1) {
    zoomLevel.value -= 0.2
  } else {
    resetImagePosition() // Reset position when zoom reaches original size
  }
}

// Start dragging
const startDragging = (event) => {
  isDragging.value = true
  lastMouseX.value = event.clientX
  lastMouseY.value = event.clientY
}

// Drag the image
const dragImage = (event) => {
  if (isDragging.value) {
    const deltaX = event.clientX - lastMouseX.value
    const deltaY = event.clientY - lastMouseY.value
    translateX.value += deltaX
    translateY.value += deltaY
    lastMouseX.value = event.clientX
    lastMouseY.value = event.clientY
  }
}

// Stop dragging
const stopDragging = () => {
  isDragging.value = false
}
</script>





.popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.popup-content {
  background: white;
  padding: 20px;
  border-radius: 10px;
  position: relative;
  max-width: 90%;
  max-height: 90%;
  overflow: hidden; /* Ensures image stays within bounds */
  display: flex;
  flex-direction: column;
}

.popup-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.popup-title {
  flex: 1; /* Makes the title take up remaining space */
  text-align: left;
}

.popup-controls {
  display: flex;
  gap: 10px;
  align-items: center;
}

.close-btn {
  background: transparent;
  border: none;
  font-size: 20px;
  cursor: pointer;
}

.popup-image-container {
  flex: 1; /* Fills remaining space */
  position: relative;
  overflow: hidden; /* Clips the image inside the container */
  cursor: grab;
}

.popup-image-container.grabbing {
  cursor: grabbing;
}

.popup-image {
  position: absolute;
  max-width: none;
  max-height: none;
  transition: transform 0.2s ease-in-out;
  transform-origin: center; /* Keeps the zoom centered */
}


<template>
  <!-- Popup for floorplan image -->
  <div class="popup" v-if="showPopup">
    <div class="popup-content">
      <!-- Header Section -->
      <div class="popup-header">
        <h2 class="popup-title">{{ selectedPlan }}</h2>
        <div class="popup-controls">
          <button @click="zoomIn" class="btn zoom-btn">Zoom In</button>
          <button @click="zoomOut" class="btn zoom-btn">Zoom Out</button>
          <button class="close-btn" @click="closePopup">×</button>
        </div>
      </div>

      <!-- Image Container Section -->
      <div
        class="popup-image-container"
        :class="{ grabbing: isDragging }"
        @mousedown="startDragging"
        @mousemove="dragImage"
        @mouseup="stopDragging"
        @mouseleave="stopDragging"
      >
        <img
          :src="selectedPlanImage"
          alt="Floorplan"
          class="popup-image"
          :style="{
            transform: `translate(${translateX}px, ${translateY}px) scale(${zoomLevel})`,
          }"
        />
      </div>
    </div>
  </div>
</template>





















        <!-- Gallery Section -->
        <div class="gallery-section">
          <h2>Gallery</h2>
          <div class="gallery-grid">
            <img v-for="(image, idx) in property.gallery" :key="idx" :src="image" alt="Gallery Image" />
          </div>
        </div>













To achieve a horizontally scrollable gallery that allows users to drag left or right and loops continuously, you can use Vue.js combined with CSS for the layout and JavaScript for the drag interaction and looping logic.

Here's how you can do it:

---

### Updated Template
```vue
<template>
  <div class="gallery-section">
    <h2>Gallery</h2>
    <div
      class="gallery-container"
      @mousedown="startDragging"
      @mousemove="onDragging"
      @mouseup="stopDragging"
      @mouseleave="stopDragging"
      @touchstart="startDragging"
      @touchmove="onDragging"
      @touchend="stopDragging"
    >
      <div
        class="gallery-track"
        :style="{ transform: `translateX(${currentOffset}px)` }"
      >
        <img
          v-for="(image, idx) in loopedGallery"
          :key="idx"
          :src="image"
          alt="Gallery Image"
        />
      </div>
    </div>
  </div>
</template>
```

---

### Updated Script
```vue
<script setup>
import { ref, computed, onMounted } from "vue";

const property = {
  gallery: [
    "image1.jpg",
    "image2.jpg",
    "image3.jpg",
    "image4.jpg",
    "image5.jpg",
  ],
};

const loopedGallery = computed(() => [
  ...property.gallery,
  ...property.gallery, // Duplicate the images for looping effect
]);

const isDragging = ref(false);
const startX = ref(0);
const currentOffset = ref(0);
const startOffset = ref(0);
const galleryWidth = ref(0);

const startDragging = (event) => {
  isDragging.value = true;
  startX.value = event.clientX || event.touches[0].clientX;
  startOffset.value = currentOffset.value;
};

const onDragging = (event) => {
  if (!isDragging.value) return;

  const currentX = event.clientX || event.touches[0].clientX;
  const deltaX = currentX - startX.value;
  currentOffset.value = startOffset.value + deltaX;
};

const stopDragging = () => {
  if (!isDragging.value) return;

  isDragging.value = false;

  // Adjust the position for looping
  if (currentOffset.value > 0) {
    currentOffset.value = -galleryWidth.value;
  } else if (currentOffset.value < -galleryWidth.value) {
    currentOffset.value = 0;
  }
};

onMounted(() => {
  galleryWidth.value = document
    .querySelector(".gallery-container")
    .offsetWidth;
});
</script>
```

---

### Updated CSS
```css
.gallery-section {
  text-align: center;
  margin: 20px;
}

.gallery-container {
  overflow: hidden;
  position: relative;
  display: flex;
  width: 100%;
  cursor: grab;
}

.gallery-container:active {
  cursor: grabbing;
}

.gallery-track {
  display: flex;
  transition: transform 0.3s ease;
  width: calc(200%); /* Enough space for looping images */
}

.gallery-track img {
  width: 100%;
  height: auto;
  flex-shrink: 0;
}
```

---

### Key Features:
1. **Looping Images:**
   - Images are duplicated to create a seamless loop effect.

2. **Draggable Interaction:**
   - Users can click and drag the gallery left or right to navigate through the images.

3. **Touch Support:**
   - Supports touch gestures for mobile devices.

4. **Smooth Transition:**
   - The gallery smoothly transitions back to a valid position when the user stops dragging.

5. **Overflow Hidden:**
   - Only the visible part of the gallery is shown, with excess content hidden.

Let me know if you need further adjustments!






































To replicate the overlay gallery with previous and next buttons similar to the provided style and ensure image sizes remain consistent, here is the updated implementation:

Updated Template
<template>
  <div class="gallery-section">
    <h2>Gallery</h2>
    <div class="gallery-grid">
      <img
        v-for="(image, idx) in property.gallery"
        :key="idx"
        :src="image"
        alt="Gallery Image"
        @click="openPopup(idx)"
        class="gallery-image"
      />
    </div>

    <!-- Popup Overlay -->
    <div v-if="isPopupOpen" class="gallery-popup">
      <div class="popup-content">
        <!-- Close Button -->
        <button class="popup-close" @click="closePopup">×</button>

        <!-- Previous Button -->
        <button class="popup-prev" @click="prevImage">&#8592;</button>

        <!-- Image Display -->
        <img :src="property.gallery[currentImage]" alt="Popup Image" class="popup-image" />

        <!-- Next Button -->
        <button class="popup-next" @click="nextImage">&#8594;</button>
      </div>
    </div>
  </div>
</template>


Script
<script setup>
import { ref } from "vue";

const property = {
  gallery: [
    "image1.jpg",
    "image2.jpg",
    "image3.jpg",
    "image4.jpg",
    "image5.jpg",
  ],
};

const isPopupOpen = ref(false);
const currentImage = ref(0);

// Open the popup and display the selected image
const openPopup = (index) => {
  currentImage.value = index;
  isPopupOpen.value = true;
};

// Close the popup
const closePopup = () => {
  isPopupOpen.value = false;
};

// Navigate to the previous image
const prevImage = () => {
  currentImage.value =
    (currentImage.value - 1 + property.gallery.length) %
    property.gallery.length;
};

// Navigate to the next image
const nextImage = () => {
  currentImage.value =
    (currentImage.value + 1) % property.gallery.length;
};
</script>


CSS
.gallery-section {
  text-align: center;
}

.gallery-grid {
  display: flex;
  gap: 10px;
  justify-content: center;
}

.gallery-image {
  width: 200px;
  height: auto;
  cursor: pointer;
  transition: transform 0.3s ease;
}

.gallery-image:hover {
  transform: scale(1.05);
}

.gallery-popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.popup-content {
  position: relative;
  text-align: center;
}

.popup-image {
  max-width: 80%;
  max-height: 80%;
  display: block;
  margin: 0 auto;
}

.popup-close {
  position: absolute;
  top: 10px;
  right: 20px;
  background: none;
  color: white;
  font-size: 24px;
  border: none;
  cursor: pointer;
}

.popup-prev,
.popup-next {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(0, 0, 0, 0.5);
  color: white;
  border: none;
  padding: 10px;
  font-size: 18px;
  cursor: pointer;
}

.popup-prev {
  left: 10px;
}

.popup-next {
  right: 10px;
}

.popup-prev:hover,
.popup-next:hover {
  background: rgba(0, 0, 0, 0.8);
}


Key Features:


Overlay Design:

The popup overlay fully covers the viewport and highlights the image.



Navigation:

Users can navigate between images using previous and next buttons.



Close Button:

A close button (×) is available to exit the popup.



Consistent Image Size:

Images scale to fit within 80% of the viewport's width and height.



Center Alignment:

The displayed image is centered within the popup.



Smooth Transitions:

CSS transitions add a hover effect to thumbnails.



Let me know if further adjustments are needed!











        <!-- Gallery Section -->
        <div class="gallery-section">
          <h2>Gallery</h2>
          <div class="gallery-grid">
            <img v-for="(image, idx) in property.gallery"
            :key="idx"
            :src="image"
            alt="Gallery Image"
            @click="openPopup(idx)" />
          </div>













<!-- HTML -->
<div class="gallery-section">
  <h2>Gallery</h2>
  <div class="gallery-grid">
    <!-- Images in the gallery -->
    <div class="gallery-item" v-for="(image, idx) in property.gallery" :key="idx">
      <img :src="image" alt="Gallery Image" @click="openPopup(idx)" />
      <!-- Hover effect content -->
      <div class="hover-overlay">
        <button class="visit-gallery-btn" @click="openPopup(idx)">Visit Gallery →</button>
      </div>
    </div>
  </div>

  <!-- Popup display -->
  <div v-if="isPopupOpen" class="gallery-popup">
    <div class="gallery-popup-content">
      <!-- Close Button -->
      <button class="popup-close" @click="closePopup">×</button>

      <!-- Previous Button -->
      <button class="popup-prev" @click="prevImage">&#8592;</button>

      <!-- Image Display -->
      <img :src="property.gallery[currentImage]" alt="Popup Image" class="gallery-popup-image" />

      <!-- Next Button -->
      <button class="popup-next" @click="nextImage">&#8594;</button>
    </div>
  </div>
</div>




/* Basic gallery grid layout */
.gallery-grid {
  display: flex;
  gap: 20px;
  justify-content: center;
  position: relative;
}

.gallery-item {
  position: relative;
  width: 300px;
  height: 200px;
  overflow: hidden;
}

.gallery-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.gallery-item:hover img {
  transform: scale(1.1); /* Zoom effect on hover */
}

.hover-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.gallery-item:hover .hover-overlay {
  opacity: 1;
}

.visit-gallery-btn {
  background-color: white;
  color: black;
  padding: 10px 20px;
  border: none;
  cursor: pointer;
  font-size: 16px;
  text-transform: uppercase;
  transition: background-color 0.3s ease;
}

.visit-gallery-btn:hover {
  background-color: black;
  color: white;
}

/* Popup styles */
.gallery-popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(0, 0, 0, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
}

.gallery-popup-content {
  position: relative;
  max-width: 90%;
  max-height: 90%;
}

.gallery-popup img {
  width: 100%;
  height: auto;
}

.popup-close,
.popup-prev,
.popup-next {
  position: absolute;
  background: none;
  color: white;
  font-size: 24px;
  border: none;
  cursor: pointer;
  transition: transform 0.2s ease;
}

.popup-close {
  top: 10px;
  right: 10px;
}

.popup-prev {
  top: 50%;
  left: 10px;
  transform: translateY(-50%);
}

.popup-next {
  top: 50%;
  right: 10px;
  transform: translateY(-50%);
}

.popup-prev:hover,
.popup-next:hover {
  transform: scale(1.2) translateY(-50%);
}



export default {
  data() {
    return {
      property: {
        gallery: [
          "image1.jpg", // Replace with actual paths
          "image2.jpg",
          "image3.jpg",
        ],
      },
      isPopupOpen: false,
      currentImage: 0,
    };
  },
  methods: {
    openPopup(idx) {
      this.currentImage = idx;
      this.isPopupOpen = true;
    },
    closePopup() {
      this.isPopupOpen = false;
    },
    prevImage() {
      this.currentImage =
        (this.currentImage - 1 + this.property.gallery.length) %
        this.property.gallery.length;
    },
    nextImage() {
      this.currentImage =
        (this.currentImage + 1) % this.property.gallery.length;
    },
  },
};


<template>
  <div class="floorplan-gallery">
    <h2>{{ propertyName }} Gallery</h2>
    <div class="gallery-grid">
      <!-- Display gallery images -->
      <div
        class="gallery-item"
        v-for="(image, idx) in gallery"
        :key="idx"
        @click="openPopup(idx)"
      >
        <img :src="image" alt="Gallery Image" />
        <div class="hover-overlay">
          <button class="visit-gallery-btn" @click.stop="openPopup(idx)">
            Visit Gallery →
          </button>
        </div>
      </div>
    </div>

    <!-- Popup display -->
    <div v-if="isPopupOpen" class="gallery-popup">
      <div class="gallery-popup-content">
        <!-- Close button -->
        <button class="popup-close" @click="closePopup">×</button>

        <!-- Navigation buttons -->
        <button class="popup-prev" @click="prevImage">&#8592;</button>
        <img
          :src="gallery[currentImage]"
          alt="Popup Image"
          class="popup-image"
        />
        <button class="popup-next" @click="nextImage">&#8594;</button>
      </div>
    </div>
  </div>
</template>


<script>
export default {
  props: ["propertyName", "gallery"], // Pass the property name and gallery dynamically
  data() {
    return {
      isPopupOpen: false,
      currentImage: 0,
    };
  },
  methods: {
    openPopup(index) {
      this.currentImage = index;
      this.isPopupOpen = true;
    },
    closePopup() {
      this.isPopupOpen = false;
    },
    prevImage() {
      this.currentImage =
        (this.currentImage - 1 + this.gallery.length) % this.gallery.length;
    },
    nextImage() {
      this.currentImage =
        (this.currentImage + 1) % this.gallery.length;
    },
  },
};
</script>

/* General styling for the gallery */
.floorplan-gallery {
  text-align: center;
}

.gallery-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: center;
}

.gallery-item {
  position: relative;
  width: 300px; /* Adjust width to match the image size */
  height: 200px; /* Adjust height to match the image size */
  overflow: hidden;
}

.gallery-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.gallery-item:hover img {
  transform: scale(1.1); /* Zoom effect on hover */
}

.hover-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.gallery-item:hover .hover-overlay {
  opacity: 1;
}

.visit-gallery-btn {
  background-color: white;
  color: black;
  padding: 10px 20px;
  border: none;
  cursor: pointer;
  font-size: 14px;
  text-transform: uppercase;
  transition: background-color 0.3s ease;
}

.visit-gallery-btn:hover {
  background-color: black;
  color: white;
}

/* Popup styles */
.gallery-popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.gallery-popup-content {
  position: relative;
  max-width: 80%;
  max-height: 80%;
}

.popup-image {
  width: 100%;
  height: auto;
}

.popup-close,
.popup-prev,
.popup-next {
  position: absolute;
  background: none;
  color: white;
  font-size: 24px;
  border: none;
  cursor: pointer;
}

.popup-close {
  top: 10px;
  right: 10px;
}

.popup-prev {
  top: 50%;
  left: 10px;
  transform: translateY(-50%);
}

.popup-next {
  top: 50%;
  right: 10px;
  transform: translateY(-50%);
}


<FloorplanGallery
  :propertyName="'Monarc Homes'"
  :gallery="floorplan['Monarc Homes'][0].gallery"
/>













const prevImage = () => {
  const gallery = floorplan[properties[0].name][0].gallery; // Access gallery from floorplan
  currentImage.value = (currentImage.value - 1 + gallery.length) % gallery.length;
};

const nextImage = () => {
  const gallery = floorplan[properties[0].name][0].gallery; // Access gallery from floorplan
  currentImage.value = (currentImage.value + 1) % gallery.length;
};


<img :src="floorplan[properties[0].name][0].gallery[currentImage]" alt="Popup Image" class="gallery-popup-image" />


<div class="gallery-grid">
  <div
    class="gallery-item"
    v-for="(image, idx) in floorplan[properties[0].name][0].gallery"
    :key="idx"
  >
    <img :src="image" alt="Gallery Image" />
    <div class="gallery-overlay">
      <button class="visit-gallery-btn" @click="openPopup(idx)">Visit Gallery</button>
    </div>
  </div>
</div>


const openPopup = (index) => {
  currentImage.value = index;
  isPopupOpen.value = true;
};

const closePopup = () => {
  isPopupOpen.value = false;
};


const floorplan = {
  'Monarc Homes': [
    {
      '2 Storey Semi-D A': [
        { area: '1,800 sqft', bedroom: 4, bathroom: 3, plan: 'src/assets/currentproject/house1.jpg', brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf' }
      ],
      '2 Storey Semi-D B': [
        { area: '2,800 sqft', bedroom: 5, bathroom: 4, plan: 'src/assets/currentproject/house3.jpg', brochure: 'src/assets/reports/BILL GATES AND MICROSOFT.pdf' }
      ],
      gallery: [
        'src/assets/currentproject/house1.jpg',
        'src/assets/currentproject/house2.jpg',
        'src/assets/currentproject/house3.jpg'
      ]
    }
  ]
};

























const dragImage = (event) => {
  if (isDragging.value) {
    const deltaX = event.clientX - lastMouseX.value;
    const deltaY = event.clientY - lastMouseY.value;

    const maxTranslateX = (selectedPlanImage.value.width / 2) * zoomLevel.value;
    const maxTranslateY = (selectedPlanImage.value.height / 2) * zoomLevel.value;

    translateX.value = Math.min(maxTranslateX, Math.max(-maxTranslateX, translateX.value + deltaX));
    translateY.value = Math.min(maxTranslateY, Math.max(-maxTranslateY, translateY.value + deltaY));

    lastMouseX.value = event.clientX;
    lastMouseY.value = event.clientY;
  }
};


const handleKeydown = (event) => {
  if (isPopupOpen.value) {
    if (event.key === 'ArrowRight') nextImage();
    else if (event.key === 'ArrowLeft') prevImage();
    else if (event.key === 'Escape') closePopup();
  }
};

onMounted(() => {
  window.addEventListener('keydown', handleKeydown);
});

onUnmounted(() => {
  window.removeEventListener('keydown', handleKeydown);
});


<q-tooltip v-if="!screenBelow540px">
  {{ property.type }}
</q-tooltip>
<p v-else>
  {{ property.type }}
</p>
































const isDragging = ref(false);
const translateX = ref(0);
const translateY = ref(0);
const lastMouseX = ref(0);
const lastMouseY = ref(0);
const velocityX = ref(0);
const velocityY = ref(0);
const isAnimating = ref(false);

const startDragging = (event) => {
  isDragging.value = true;
  lastMouseX.value = event.clientX;
  lastMouseY.value = event.clientY;
  isAnimating.value = false; // Stop any ongoing animations
};

const dragImage = (event) => {
  if (isDragging.value) {
    const deltaX = event.clientX - lastMouseX.value;
    const deltaY = event.clientY - lastMouseY.value;

    translateX.value += deltaX;
    translateY.value += deltaY;

    velocityX.value = deltaX; // Capture velocity
    velocityY.value = deltaY;

    lastMouseX.value = event.clientX;
    lastMouseY.value = event.clientY;
  }
};

const stopDragging = () => {
  if (isDragging.value) {
    isDragging.value = false;

    // Start momentum animation
    isAnimating.value = true;
    momentumAnimation();
  }
};

// Smooth momentum animation using requestAnimationFrame
const momentumAnimation = () => {
  if (!isAnimating.value) return;

  // Apply friction to velocity
  velocityX.value *= 0.95;
  velocityY.value *= 0.95;

  // Update position
  translateX.value += velocityX.value;
  translateY.value += velocityY.value;

  // Stop animation if velocity is very low
  if (Math.abs(velocityX.value) < 0.1 && Math.abs(velocityY.value) < 0.1) {
    isAnimating.value = false;
    return;
  }

  requestAnimationFrame(momentumAnimation);
};


<div
  class="draggable"
  @mousedown="startDragging"
  @mousemove="dragImage"
  @mouseup="stopDragging"
  @mouseleave="stopDragging"
  :style="{
    transform: `translate(${translateX}px, ${translateY}px)`,
  }"
></div>




.draggable {
  cursor: grab;
  transition: transform 0.1s ease-out;
  will-change: transform;
}
.draggable:active {
  cursor: grabbing;
}

























To create a **gallery layout** where the central image is prominent, with smaller images partially visible on the left and right, similar to the carousel effect you described, here's how you can achieve it:

---

### CSS Styles for the Gallery

```html
<style>
.gallery-section {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 50px;
}

.gallery-wrapper {
  position: relative;
  width: 80%;
  display: flex;
  overflow: hidden;
  justify-content: center;
  align-items: center;
}

.gallery-carousel {
  display: flex;
  transition: transform 0.5s ease-in-out;
}

.gallery-item {
  min-width: 40%; /* Slightly smaller than the full width to show partial images */
  margin: 0 10px;
  transition: transform 0.3s ease, opacity 0.3s ease;
  opacity: 0.5;
}

.gallery-item img {
  width: 100%;
  border-radius: 8px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
}

.gallery-item.active {
  transform: scale(1.2);
  opacity: 1;
}

.gallery-controls {
  margin-top: 20px;
  display: flex;
  justify-content: center;
  gap: 10px;
}

.control-btn {
  background-color: #333;
  color: #fff;
  border: none;
  padding: 10px 20px;
  cursor: pointer;
  border-radius: 5px;
}

.control-btn:hover {
  background-color: #555;
}
</style>
```

---

### HTML Structure for the Gallery

```html
<div class="gallery-section">
  <h2>Gallery</h2>
  <div class="gallery-wrapper">
    <div class="gallery-carousel">
      <div
        v-for="(image, idx) in galleryImages"
        :key="idx"
        class="gallery-item"
        :class="{ active: idx === activeIndex }"
      >
        <img :src="image" alt="Gallery Image" />
      </div>
    </div>
  </div>

  <div class="gallery-controls">
    <button class="control-btn" @click="prevImage">Previous</button>
    <button class="control-btn" @click="nextImage">Next</button>
  </div>
</div>
```

---

### JavaScript/Logic for Carousel

Add the logic for the carousel functionality:

```javascript
const activeIndex = ref(0); // Index of the currently active image

const prevImage = () => {
  activeIndex.value =
    (activeIndex.value - 1 + galleryImages.length) % galleryImages.length;
};

const nextImage = () => {
  activeIndex.value = (activeIndex.value + 1) % galleryImages.length;
};
```

---

### Gallery Behavior Explanation

1. **Layout & Styles:**
   - The `gallery-carousel` is a horizontally scrollable container with images (`gallery-item`) arranged side by side.
   - The image in the center (`active`) is highlighted with increased `opacity` and `scale`, while the surrounding images are partially visible with reduced `opacity`.

2. **Smooth Transitions:**
   - CSS `transform` and `opacity` animations ensure smooth transitions between images.

3. **Carousel Functionality:**
   - The `prevImage` and `nextImage` functions update the `activeIndex` to navigate between images.
   - The carousel automatically adjusts which image is centered by applying the `active` class dynamically based on the `activeIndex`.

4. **Responsiveness:**
   - The gallery is styled with percentages (`width: 80%;`) to adapt well to different screen sizes.

---

### Demo Behavior

- The gallery displays one prominent image in the center and partial views of the adjacent images on either side.
- Clicking the **Previous** or **Next** buttons shifts the images to bring the next or previous image to the center.

This design replicates the visual style you described. Let me know if you'd like to refine any part!














onMounted(() => {
  const secondImage = Object.keys(galleryHouses[properties[0].name][1].gallery)
  centerImage.value = secondImage
})






























To make the gallery section layout match your image, you can style the center image to be larger and focus on it, while the first and third images are displayed smaller on the sides. Here’s how you can modify your gallery grid CSS to achieve this layout:

### Updated CSS:
```css
.gallery-grid {
  display: flex;
  gap: 20px;
  padding-bottom: 20px;
  padding-top: 80px;
  justify-content: center;
  position: relative;
}

.gallery-item {
  position: relative;
  overflow: hidden;
  transition: transform 0.3s ease;
}

.gallery-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.gallery-grid .gallery-item:nth-child(2) {
  flex: 2; /* Make the center image larger */
  height: 500px;
}

.gallery-grid .gallery-item:not(:nth-child(2)) {
  flex: 1; /* Smaller images for the sides */
  height: 300px;
}

.gallery-item:hover img {
  transform: scale(1.1);
}

.gallery-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.gallery-item:hover .gallery-overlay {
  opacity: 1;
}

.visit-gallery-btn {
  background-color: rgba(0, 0, 0, 0.6);
  color: white;
  padding: 10px 20px;
  border: none;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s ease;
}

.visit-gallery-btn:hover {
  background-color: #08463c;
  color: white;
}
```

### Key Adjustments:
1. **Flexbox Layout:**
   - The `gallery-grid` uses flexbox to arrange the items in a row.
   - The second image (center) is styled with `flex: 2` to make it larger, while the others have `flex: 1` for smaller sizes.

2. **Dynamic Heights:**
   - Center image (`nth-child(2)`) is taller (`500px`), while side images are shorter (`300px`).

3. **Hover Effect:**
   - The hover effect is retained to zoom in when the user hovers over an image.

4. **Popup Handling:**
   - Clicking on any image opens the popup as before, showing all images.

### HTML Adjustments:
Ensure your gallery section has three images initially displayed in the HTML and the rest hidden for the popup:
```html
<div class="gallery-grid">
  <div class="gallery-item" v-for="(image, idx) in galleryHouses[properties[0].name][0].gallery.slice(0, 3)" :key="idx">
    <img :src="image" loading="lazy" alt="Gallery Image" @click="openPopup(idx)" />
    <div class="gallery-overlay">
      <button class="visit-gallery-btn" @click="openPopup(idx)">Visit Gallery</button>
    </div>
  </div>
</div>
```

This setup ensures the first three images are visible, styled as per the new layout, and clicking any of them opens the popup gallery. Let me know if you'd like additional refinements!


































To achieve your described layout, where:

1. **The center image is prominently displayed** with a larger width.
2. **The left and right images are partially visible, showing only their respective edge portions** (the last quarter of the left image and the first quarter of the right image).

Here’s how to structure and style it:

---

### Updated CSS:

```css
.gallery-grid {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  gap: 0; /* No gap since side images will partially overlap */
  padding-top: 80px;
  padding-bottom: 20px;
}

.gallery-item {
  position: relative;
  overflow: hidden;
  transition: transform 0.3s ease;
}

.gallery-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.gallery-grid .gallery-item:nth-child(1) {
  flex: 1; /* Smaller for left image */
  max-width: 25%; /* Show only the last quarter */
  height: 500px;
  clip-path: inset(0 75% 0 0); /* Hide the first three-quarters */
}

.gallery-grid .gallery-item:nth-child(2) {
  flex: 2; /* Larger for center image */
  max-width: 50%; /* Full width for the center image */
  height: 500px;
}

.gallery-grid .gallery-item:nth-child(3) {
  flex: 1; /* Smaller for right image */
  max-width: 25%; /* Show only the first quarter */
  height: 500px;
  clip-path: inset(0 0 0 75%); /* Hide the last three-quarters */
}

.gallery-item:hover img {
  transform: scale(1.1);
}

.gallery-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.gallery-item:hover .gallery-overlay {
  opacity: 1;
}

.visit-gallery-btn {
  background-color: rgba(0, 0, 0, 0.6);
  color: white;
  padding: 10px 20px;
  border: none;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s ease;
}

.visit-gallery-btn:hover {
  background-color: #08463c;
  color: white;
}
```

---

### Explanation:

1. **Flexbox Layout:**
   - The `.gallery-grid` is a flex container where each child (`.gallery-item`) takes its space based on `flex` and `clip-path`.

2. **Center Image:**
   - The second image (`nth-child(2)`) is given `flex: 2`, making it occupy more space in the layout and become the largest in width.

3. **Side Images (Left and Right):**
   - Both side images (`nth-child(1)` and `nth-child(3)`) use `clip-path` to control the visible portion:
     - The left image shows only the **last quarter**.
     - The right image shows only the **first quarter**.

4. **Hover Effect:**
   - A zoom-in effect is applied to all images on hover for better interactivity.

---

### Updated HTML:
Ensure the gallery has the correct structure in your Vue.js or plain HTML:

```html
<div class="gallery-grid">
  <!-- Left Image -->
  <div class="gallery-item" v-if="galleryHouses[properties[0].name][0].gallery[0]">
    <img :src="galleryHouses[properties[0].name][0].gallery[0]" alt="Left Image" @click="openPopup(0)" />
    <div class="gallery-overlay">
      <button class="visit-gallery-btn" @click="openPopup(0)">Visit Gallery</button>
    </div>
  </div>

  <!-- Center Image -->
  <div class="gallery-item" v-if="galleryHouses[properties[0].name][0].gallery[1]">
    <img :src="galleryHouses[properties[0].name][0].gallery[1]" alt="Center Image" @click="openPopup(1)" />
    <div class="gallery-overlay">
      <button class="visit-gallery-btn" @click="openPopup(1)">Visit Gallery</button>
    </div>
  </div>

  <!-- Right Image -->
  <div class="gallery-item" v-if="galleryHouses[properties[0].name][0].gallery[2]">
    <img :src="galleryHouses[properties[0].name][0].gallery[2]" alt="Right Image" @click="openPopup(2)" />
    <div class="gallery-overlay">
      <button class="visit-gallery-btn" @click="openPopup(2)">Visit Gallery</button>
    </div>
  </div>
</div>
```

---

### Features:
- **Center focus:** The middle image dominates the layout.
- **Side previews:** Only edge portions of the left and right images are visible.
- **Popup-ready:** Clicking any image still opens the full gallery in a popup.

Let me know if you need further adjustments!

























To make the **Gallery** button in the hero section scroll smoothly to the gallery section when clicked, you can use the following approach.

---

### HTML Update
Ensure the gallery section has a unique ID (e.g., `gallery-section`) for referencing.

#### Hero Section (Gallery Button):
```html
<button class="gallery-btn" @click="scrollToGallery">Gallery</button>
```

#### Gallery Section:
```html
<div id="gallery-section" class="gallery-grid">
  <!-- Your gallery images here -->
</div>
```

---

### JavaScript: Smooth Scrolling Function
Add a method in your Vue.js methods section to handle scrolling:

```javascript
methods: {
  scrollToGallery() {
    const gallerySection = document.getElementById("gallery-section");
    if (gallerySection) {
      gallerySection.scrollIntoView({ behavior: "smooth" });
    }
  },
},
```

---

### Styling for the Button (Optional)
If you want to style the button, you can update its appearance:

```css
.gallery-btn {
  background-color: #08463c;
  color: white;
  padding: 10px 20px;
  font-size: 16px;
  border: none;
  cursor: pointer;
  border-radius: 5px;
  transition: background-color 0.3s ease;
}

.gallery-btn:hover {
  background-color: #066d53;
}
```

---

### Result
1. When the **Gallery** button is clicked, it will scroll smoothly to the gallery section.
2. The transition will create a user-friendly experience, maintaining smooth navigation within the page.

Let me know if you need additional tweaks!
























If you want the **Gallery** button to scroll to a different page (not the same page), you can do so by:

1. Specifying the target page's URL.
2. Optionally appending an anchor ID to scroll to a specific section on the target page.

---

### Steps to Implement Scrolling to Another Page

#### Hero Section Button
Update the `Gallery` button to include a `router-link` (if you're using Vue Router) or a standard `href` link:

#### Using `href` (Direct URL Navigation)
```html
<a href="/gallery-page#gallery-section" class="gallery-btn">Gallery</a>
```

In this example:
- `/gallery-page` is the URL of the target page.
- `#gallery-section` is the ID of the section on that page.

---

#### Using Vue Router's `router-link` (If Your App Uses Vue Router)
```html
<router-link
  :to="{ path: '/gallery-page', hash: '#gallery-section' }"
  class="gallery-btn"
>
  Gallery
</router-link>
```

---

### Scrolling on the Target Page
On the target page (`/gallery-page`), ensure the `gallery-section` has the correct ID for smooth scrolling:

```html
<div id="gallery-section">
  <!-- Content of the gallery section -->
</div>
```

---

### Smooth Scrolling Enhancement (Optional)
To enhance the user experience with smooth scrolling across pages, you can add this CSS rule to both pages:

```css
html {
  scroll-behavior: smooth;
}
```

---

### Behavior
1. When the **Gallery** button is clicked, the page will navigate to `/gallery-page` and scroll directly to the section with the ID `gallery-section`.
2. If the section doesn't exist on the target page, it will just navigate to the page's top.

Let me know if you'd like further clarification or examples!
const router = createRouter({
  history: createWebHistory(),
  routes: [
    // your routes here
  ],
  scrollBehavior(to, from, savedPosition) {
    if (to.hash) {
      return {
        el: to.hash,
        behavior: 'smooth',
      };
    } else if (savedPosition) {
      return savedPosition;
    } else {
      return { top: 0 };
    }
  },
});
















To navigate from the main layout to a specific section on another page and smoothly scroll to that section, you can use Vue Router with a proper setup. Here's how to achieve this:

---

### Adjusting Your Code

```vue
<router-link
  to="/about-miracle#section-contact"
  @click.native="navigateToContactUs"
  class="footer-link"
>
  Contact Us
</router-link>
```

---

### Supporting Smooth Scrolling Between Pages

1. **Configure `scrollBehavior` in `vue-router`:**

   Update the `scrollBehavior` function in your `vue-router` setup to handle anchor links properly.

   ```javascript
   import { createRouter, createWebHistory } from 'vue-router';

   const router = createRouter({
     history: createWebHistory(),
     routes: [
       // your routes here
     ],
     scrollBehavior(to) {
       if (to.hash) {
         return {
           el: to.hash,
           behavior: 'smooth',
         };
       }
       return { top: 0 }; // Default scroll position
     },
   });

   export default router;
   ```

2. **Ensure the Target Section Exists:**

   On the `/about-miracle` page, verify that the element has the corresponding `id="section-contact"`. For example:

   ```html
   <section id="section-contact">
     <h2>Contact Us</h2>
     <!-- Content here -->
   </section>
   ```

3. **Handle Additional Actions in `navigateToContactUs`:**

   If you need to perform any custom logic when clicking the link (e.g., tracking events), you can implement it in the `navigateToContactUs` method:

   ```javascript
   methods: {
     navigateToContactUs() {
       console.log('Navigating to Contact Us section');
       // Additional actions, e.g., analytics tracking
     },
   },
   ```

   Note: Use `@click.native` for Vue Router links if you want to ensure your custom logic runs without overriding the navigation behavior.

---

### Final Testing Steps

1. Navigate from the main layout and ensure the `/about-miracle` page loads with a smooth scroll to the `#section-contact`.
2. Verify the `navigateToContactUs` method is called and performs any additional logic as expected.

This approach ensures smooth navigation and compatibility with anchor scrolling.












The issue occurs because `<script setup>` in Vue 3 doesn't support `export` statements directly since it’s designed to be setup-based rather than module-based. To resolve this, move the router setup into a dedicated module (e.g., `router.js` or `router.ts`) and then import it wherever needed.

Here’s how you can fix the issue step by step:

---

### Step 1: Create a Separate Router Module

Create a new file, e.g., `router.js` or `router.ts`, and move your router configuration there:

```javascript
// router.js or router.ts
import { createRouter, createWebHistory } from 'vue-router';

const routes = [
  {
    path: '/about-miracle',
    name: 'AboutMiracle',
    component: () => import('@/views/AboutMiracle.vue'), // Adjust the path to your component
  },
];

const router = createRouter({
  history: createWebHistory(),
  routes,
  scrollBehavior(to) {
    if (to.hash) {
      return {
        el: to.hash,
        behavior: 'smooth',
      };
    }
    return { top: 0 }; // Default scroll position
  },
});

export default router;
```

---

### Step 2: Use the Router in Your Main Application

In your main application file (e.g., `main.js` or `main.ts`), import and use the router:

```javascript
// main.js or main.ts
import { createApp } from 'vue';
import App from './App.vue';
import router from './router'; // Import the router

const app = createApp(App);

app.use(router); // Use the router
app.mount('#app');
```

---

### Step 3: Update the `router-link`

Ensure that your `router-link` points to the correct route and hash:

```vue
<router-link
  to="/about-miracle#section-contact"
  class="footer-link"
>
  Contact Us
</router-link>
```

---

### Explanation of Fixes

1. **Modular Router Setup:**
   - The router configuration is moved out of `<script setup>` into a separate module, which resolves the `export` restriction.

2. **Dynamic Component Loading:**
   - The `component` in the route is dynamically imported for performance optimization.

3. **Smooth Scrolling Behavior:**
   - The `scrollBehavior` function ensures smooth scrolling to the target section using the `to.hash`.

4. **Integration with Main App:**
   - The router is properly integrated into the Vue application.

This setup ensures clean code organization and resolves the ESLint errors in `<script setup>`.The issue occurs because `<script setup>` in Vue 3 doesn't support `export` statements directly since it’s designed to be setup-based rather than module-based. To resolve this, move the router setup into a dedicated module (e.g., `router.js` or `router.ts`) and then import it wherever needed.

Here’s how you can fix the issue step by step:

---

### Step 1: Create a Separate Router Module

Create a new file, e.g., `router.js` or `router.ts`, and move your router configuration there:

```javascript
// router.js or router.ts
import { createRouter, createWebHistory } from 'vue-router';

const routes = [
  {
    path: '/about-miracle',
    name: 'AboutMiracle',
    component: () => import('@/views/AboutMiracle.vue'), // Adjust the path to your component
  },
];

const router = createRouter({
  history: createWebHistory(),
  routes,
  scrollBehavior(to) {
    if (to.hash) {
      return {
        el: to.hash,
        behavior: 'smooth',
      };
    }
    return { top: 0 }; // Default scroll position
  },
});

export default router;
```

---

### Step 2: Use the Router in Your Main Application

In your main application file (e.g., `main.js` or `main.ts`), import and use the router:

```javascript
// main.js or main.ts
import { createApp } from 'vue';
import App from './App.vue';
import router from './router'; // Import the router

const app = createApp(App);

app.use(router); // Use the router
app.mount('#app');
```

---

### Step 3: Update the `router-link`

Ensure that your `router-link` points to the correct route and hash:

```vue
<router-link
  to="/about-miracle#section-contact"
  class="footer-link"
>
  Contact Us
</router-link>
```

---

### Explanation of Fixes

1. **Modular Router Setup:**
   - The router configuration is moved out of `<script setup>` into a separate module, which resolves the `export` restriction.

2. **Dynamic Component Loading:**
   - The `component` in the route is dynamically imported for performance optimization.

3. **Smooth Scrolling Behavior:**
   - The `scrollBehavior` function ensures smooth scrolling to the target section using the `to.hash`.

4. **Integration with Main App:**
   - The router is properly integrated into the Vue application.

This setup ensures clean code organization and resolves the ESLint errors in `<script setup>`.









  If you're using `vueRouterMode: 'hash'`, it means your Vue Router uses the hash mode instead of the history mode. This impacts how URLs are constructed (e.g., `/about-miracle#section-contact` becomes `/#/about-miracle#section-contact`). Here's how to configure Vue Router with hash mode while ensuring smooth scrolling works correctly:

---

### Step 1: Update Router Setup for Hash Mode

Adjust your router configuration to use `createWebHashHistory` instead of `createWebHistory`:

```javascript
// router.js or router.ts
import { createRouter, createWebHashHistory } from 'vue-router';

const routes = [
  {
    path: '/about-miracle',
    name: 'AboutMiracle',
    component: () => import('@/views/AboutMiracle.vue'), // Adjust path to your component
  },
];

const router = createRouter({
  history: createWebHashHistory(), // Use hash mode
  routes,
  scrollBehavior(to) {
    if (to.hash) {
      return {
        el: to.hash,
        behavior: 'smooth',
      };
    }
    return { top: 0 }; // Default scroll position
  },
});

export default router;
```

---

### Step 2: Modify the `router-link`

Ensure the `router-link` points to the correct route and hash:

```vue
<router-link
  to="/about-miracle#section-contact"
  class="footer-link"
>
  Contact Us
</router-link>
```

---

### Step 3: Add Target Section in `/about-miracle`

Ensure the target section on the `/about-miracle` page has the correct `id`:

```html
<section id="section-contact">
  <h2>Contact Us</h2>
  <!-- Contact information here -->
</section>
```

---

### Step 4: Smooth Scrolling with Hash Mode

In `vueRouterMode: 'hash'`, URLs will look like this: `/#/about-miracle#section-contact`. The `scrollBehavior` function ensures the browser scrolls smoothly to the specified hash.

```javascript
scrollBehavior(to) {
  if (to.hash) {
    return {
      el: to.hash,
      behavior: 'smooth',
    };
  }
  return { top: 0 }; // Default scroll position
}
```

---

### Step 5: Test Navigation

1. Test the navigation using the `router-link` to ensure:
   - The `/about-miracle` page loads correctly.
   - The browser scrolls smoothly to `#section-contact`.

2. If the hash doesn't work as expected:
   - Check if `id="section-contact"` exists in the target DOM.
   - Confirm `scrollBehavior` is correctly implemented.

---

### Summary

Switching to `vueRouterMode: 'hash'` only requires changing `createWebHistory` to `createWebHashHistory`. The rest of the functionality, including anchor scrolling, remains largely the same. This setup ensures compatibility with hash mode URLs while preserving smooth navigation.







If you're building a webpage with Vue (like a Single Page Application), you typically have a `main.js` file in your project's `src` directory. This file is where you initialize your Vue app and set up plugins, including Vue Router. If you don’t see it directly, follow these steps:

---

### Locate or Identify Your `main.js` File
1. **Default Location:** Look in the `src/` directory of your Vue project. The file is usually named `main.js` or `main.ts` (for TypeScript projects).
   - Example path: `src/main.js`

2. **If You Can't Find It:**
   - Ensure you’re inside a Vue CLI-generated or Vite-generated project structure.
   - Check the `package.json` file for the `scripts` section and see what file is used for the build/start command.

---

### Common Project Structures

#### **Vue CLI Project Structure**
```plaintext
src/
├── assets/
├── components/
├── router/
│   ├── index.js
│   └── routes.js
├── views/
├── App.vue
├── main.js
```

#### **Vite Project Structure**
```plaintext
src/
├── assets/
├── components/
├── router/
│   ├── index.js
│   └── routes.js
├── views/
├── App.vue
├── main.js
```

---

### Steps to Configure Your `main.js`

Once you find the `main.js`, modify it to include Vue Router:

```javascript
// src/main.js
import { createApp } from 'vue';
import App from './App.vue';
import router from './router'; // Import the router

const app = createApp(App);

app.use(router); // Add the router to the app
app.mount('#app'); // Mount the app to the DOM
```

---

### When Using Vue for a Website (Without CLI or Vite)

If you are not using a CLI tool and instead just include Vue in your HTML page via a `<script>` tag, then you might not have a `main.js` file. In this case:

1. **Define the Router and Routes Inline**
   You’ll define your routes and app logic directly in your `<script>` block in the HTML file.

2. **Example**
```html
<!DOCTYPE html>
<html>
<head>
  <script src="https://unpkg.com/vue@3"></script>
  <script src="https://unpkg.com/vue-router@4"></script>
</head>
<body>
  <div id="app"></div>

  <script>
    const AboutMiracle = {
      template: `<div><section id="section-contact"><h2>Contact Us</h2></section></div>`,
    };

    const routes = [
      { path: '/about-miracle', component: AboutMiracle },
    ];

    const router = VueRouter.createRouter({
      history: VueRouter.createWebHashHistory(),
      routes,
      scrollBehavior(to) {
        if (to.hash) {
          return {
            el: to.hash,
            behavior: 'smooth',
          };
        }
        return { top: 0 };
      },
    });

    const app = Vue.createApp({});
    app.use(router);
    app.mount('#app');
  </script>
</body>
</html>
```

This approach is less modular but works for simple webpages without a complex build process. Let me know your project setup, and I can guide you further!






















import { route } from 'quasar/wrappers'
import { createRouter, createMemoryHistory, createWebHistory, createWebHashHistory } from 'vue-router'
import routes from './routes'

export default route(function (/* { store, ssrContext } */) {
  const createHistory = process.env.SERVER
    ? createMemoryHistory
    : (process.env.VUE_ROUTER_MODE === 'history' ? createWebHistory : createWebHashHistory)

  const Router = createRouter({
    scrollBehavior(to, from, savedPosition) {
      if (savedPosition) {
        return savedPosition;
      } else if (to.hash) {
        return {
          el: to.hash,
          behavior: 'smooth',
        };
      } else {
        return { left: 0, top: 0 };
      }
    },
    routes,

    // Leave this as is and make changes in quasar.conf.js instead!
    // quasar.conf.js -> build -> vueRouterMode
    // quasar.conf.js -> build -> publicPath
    history: createHistory(process.env.VUE_ROUTER_BASE)
  })

  return Router
})




export default route(function () {
  const createHistory = process.env.SERVER
    ? createMemoryHistory
    : (process.env.VUE_ROUTER_MODE === 'history' ? createWebHistory : createWebHashHistory);

  const Router = createRouter({
    routes,

    scrollBehavior(to, from, savedPosition) {
      if (savedPosition) {
        return savedPosition; // For browser back/forward
      } else if (to.hash) {
        return {
          el: to.hash,
          behavior: 'smooth', // Smooth scroll
        };
      }
      return { top: 0 }; // Default to top for new pages
    },

    history: createHistory(process.env.VUE_ROUTER_BASE),
  });

  return Router;
});



















<script setup>
import { ref } from 'vue'

// Function to generate slug
const generateSlug = (title) => {
  return title.toLowerCase().replace(/ /g, '-').replace(/[^\w-]+/g, '')
}

// Define news data
export const newsItems = ref([
  {
    id: 1,
    title: 'New Project Launch',
    slug: generateSlug('New Project Launch'),
  },
  {
    id: 2,
    title: 'Company Partnership Announcement',
    slug: generateSlug('Company Partnership Announcement'),
  },
  {
    id: 3,
    title: 'Exciting Innovation in Real Estate',
    slug: generateSlug('Exciting Innovation in Real Estate'),
  },
  {
    id: 4,
    title: 'Exciting Advancement in Craft',
    slug: generateSlug('Exciting Advancement in Craft'),
  },
])
</script>
